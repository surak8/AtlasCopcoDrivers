//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Reflection;
using System.Windows;
using Colt.Utility.Logging;

namespace NSNewDriver {

	public partial class MainWindow : Window {
		MainWindowViewModel _vm;
		readonly IColtLogger logger;

		MainWindow() { }
		internal MainWindow(IColtLogger logger) {
			this.logger = logger;
			this.DataContext = (_vm = new MainWindowViewModel(this.logger));
			InitializeComponent();
			//this.logger = logger;
		}

		const string FRAME_KEY = "Main Window Frame";

		//IColtLogger logger { get; }

		void Window1_Initialized(object sender, EventArgs e) {
			double left, top, width, height;

			if (Utility.retrieveWindowBounds(FRAME_KEY, out left, out top, out width, out height)) {
				//System.Diagnostics.Trace.WriteLine("Here");
				_vm.windowTop = top;
				_vm.windowLeft = left;
				_vm.windowWidth = width;
				_vm.windowHeight = height;
			} else {
				_vm.windowWidth = 325;
				_vm.windowHeight = 225;
				_vm.windowLeft = (SystemParameters.PrimaryScreenWidth - _vm.windowWidth) / 2.0;
				_vm.windowTop = (SystemParameters.PrimaryScreenHeight - _vm.windowHeight) / 2.0;
			}
			//_vm.
			if (cbAutostart.IsChecked.HasValue && cbAutostart.IsChecked.Value)
				//_vm.createListener("192.168.105.8", 4545);
				_vm.startListening();
		}

		void Window1_SizeChanged(object sender, SizeChangedEventArgs e) {
			Utility.saveWindowBoundsToRegistry(this, FRAME_KEY);
		}

		void Window1_LocationChanged(object sender, EventArgs e) {
			Utility.saveWindowBoundsToRegistry(this, FRAME_KEY);
		}

		void requestPSets(object sender, RoutedEventArgs e) {
			if (_vm.listener != null)
				_vm.listener.requestPSetIDs();
		}

		void requestJobs(object sender, RoutedEventArgs e) {
			if (_vm.listener != null)
				_vm.listener.requestJobIDs();
		}

		void BtnStart_Click(object sender, RoutedEventArgs e) {
			Trace.WriteLine("here");
			//if (_vm.listener /*!*/= null)
			_vm.startListening();
		}

		void BtnStop_Click(object sender, RoutedEventArgs e) {
			Trace.WriteLine("here");
			_vm.stopListening();

		}

		void subscribePSets(object sender, RoutedEventArgs e) {
			_vm.suscribePSets();
		}

		void subscribeLockBatch(object sender, RoutedEventArgs e) {
			_vm.suscribeLockBatch();
		}

		void subscribeJobInfo(object sender, RoutedEventArgs e) {
			_vm.suscribeJobInfo();
		}

		void lastTighteningSubscribe(object sender, RoutedEventArgs e) {
			//MessageBox.Show("unhandled", ColtLogger.makeSig(MethodBase.GetCurrentMethod());
			_vm.suscribeLastTightening();
		}

		void vinSubscribe(object sender, RoutedEventArgs e) {
			//MessageBox.Show("unhandled", ColtLogger.makeSig(MethodBase.GetCurrentMethod()));
			_vm.subscribeVIN();
		}

		void alarmSubscribe(object sender, RoutedEventArgs e) {
			//MessageBox.Show("unhandled", ColtLogger.makeSig(MethodBase.GetCurrentMethod());
			_vm.subscribeAlarm();

		}

		void multiSpindleStatusSubscribe(object sender, RoutedEventArgs e) {
			//MessageBox.Show("unhandled", ColtLogger.makeSig(MethodBase.GetCurrentMethod()));
			_vm.subscribeMSpindleStatus();
		}

		void multiSpindleResultSubscribe(object sender, RoutedEventArgs e) {
			//MessageBox.Show("unhandled", ColtLogger.makeSig(MethodBase.GetCurrentMethod()));
			_vm.subscribeMSpindleResults();
		}

		void subscribe420(object sender, RoutedEventArgs e) {
			//#error fix this
			_vm.subscribeDisableACProto420();
		}

		void subscribe400(object sender, RoutedEventArgs e) {
			//#error fix this
			_vm.subscribeAutoManualProto400();

		}

		void subscribe261(object sender, RoutedEventArgs e) {
			//#error fix* this
			_vm.subscribeToolTagID261();

		}

		void subscribe250(object sender, RoutedEventArgs e) {
			//#error fix this
			_vm.subscribeSelectorSocketInfo250();

		}

		void subscribe240(object sender, RoutedEventArgs e) {
			//#error fix this
			_vm.subscribeUserData240();

		}

		void subscribe216(object sender, RoutedEventArgs e) {
			//#error fix this
			_vm.subscribeRelayFunction216();

		}

		void subscribe210(object sender, RoutedEventArgs e) =>
			//#error fix this
			_vm.subscribeExtInputs210();

		void subscribe151(object sender, RoutedEventArgs e) {
			_vm.subscribeMultiIdent151();

		}

		void subscribe120(object sender, RoutedEventArgs e) {
			_vm.subscribeJobLineInfo120();

		}

		void alarmUnsubscribe(object sender, RoutedEventArgs e) {
			_vm.unsubscribeAlarm73();

		}

		void unsubscribeLastTightening63(object sender, RoutedEventArgs e) {
			_vm.unsubscribeLastTightening63();

		}

		void CbAutostart_Click(object sender, RoutedEventArgs e) {
			logger.log(MethodBase.GetCurrentMethod());
		}

		void CbAutostart_Checked(object sender, RoutedEventArgs e) {
			logger.log(MethodBase.GetCurrentMethod());

		}

		void BtnSetVin_Click(object sender, RoutedEventArgs e) {
			_vm.setVinNumber();

		}
	}
}