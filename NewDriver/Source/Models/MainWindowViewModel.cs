//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using Colt.Utility.Logging;
#if KENNY
#else
using OpenProtocolInterpreter;
#endif

namespace NSNewDriver {

	public partial class MainWindowViewModel : INotifyPropertyChanged {
		const string AUTOSTART_KEY="Autostart Listener";
		#region fields
		ACListener  _acListener;
		#endregion

		#region ctor
		internal MainWindowViewModel(IColtLogger logger) {
			AtlasCopcoController vvv;

			this.logger = logger;
			windowTitle = "hello, world";

			defaultController = "FMS Breech";
			this.atlasCopcoControllers = new ObservableCollection<AtlasCopcoController>(
				new AtlasCopcoController[] {
					new AtlasCopcoController("192.168.105.176", 4545,  "FMS Torque Ext Tube"),
					new AtlasCopcoController("192.168.105.170", 4545,  "FMS Grip Butt"),
					vvv=new AtlasCopcoController("192.168.105.8", 4545, "FMS Breech"),
					new AtlasCopcoController("192.168.105.10", 4545, "FMS BC Assembly"),
					new AtlasCopcoController("192.168.105.177", 4545, "COMM Torque")
				});
			foreach (AtlasCopcoController acc in this.atlasCopcoControllers)
				if (string.Compare(acc.controllerDescription, defaultController, true) == 0) {
					this.selectedController = acc;
					break;
				}
			this.allowDeviceSelection = true;
			this.isAutostartChecked = Utility.readRegistryValue(AUTOSTART_KEY, false);
		}

		#endregion

		void saveAutostartSetting(bool shouldAutostart) {
			Utility.saveRegistryValue(AUTOSTART_KEY, shouldAutostart);
		}

		#region INotifyPropertyChanged helpers
		public event PropertyChangedEventHandler PropertyChanged;
		public void firePropertyChanged(string propertyName) {
			if ((this.PropertyChanged != null)) {
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}


		public void firePropertyChanged(MethodBase mb) {
			int n;

			if (((n = mb.Name.Length)
						> 4)) {
				if (((string.Compare(mb.Name.Substring(0, 3), "get", true) == 0)
							|| (string.Compare(mb.Name.Substring(0, 3), "set", true) == 0))) {
					firePropertyChanged(mb.Name.Substring(4));
				}
			}
		}

		#endregion
		internal void startListening() {
			if (this._acListener == null)
				createListener(
					selectedController.ipAddress,
					selectedController.portNumber);
		}

		internal void suscribePSets() {
			if (this._acListener != null)
				_acListener.suscribePSets();
		}

		internal void suscribeLockBatch() {
			if (this._acListener != null)
				_acListener.suscribeLockBatch();
		}

		internal void suscribeJobInfo() {
			if (this._acListener != null)
				_acListener.suscribeJobInfo();
		}

		internal void subscribeVIN() {
			//#error here.
			if (this._acListener != null)
				_acListener.subscribeVIN();
		}

		internal void stopListening() {
			if (this._acListener != null) {
				this._acListener.stop();
				this._acListener.Dispose();
				this._acListener = null;
				this.allowDeviceSelection = true;
			}
		}

		internal void subscribeMSpindleStatus() {
			//#error here.
			if (this._acListener != null)
				_acListener.subscribeMSpindleStatus();
		}

		internal void suscribeLastTightening() {
			if (this._acListener != null)
				_acListener.suscribeLastTightening();
		}

		internal void subscribeDisableACProto420() {
			if (this._acListener != null)
				_acListener.subscribeDisableACProto420();
		}

		internal void subscribeMSpindleResults() {
			//#error here.
			if (this._acListener != null)
				_acListener.subscribeMSpindleResults();
		}

		internal void subscribeToolTagID261() {
			if (this._acListener != null)
				_acListener.subscribeToolTagID261();
		}

		internal void subscribeAutoManualProto400() {
			if (this._acListener != null)
				_acListener.subscribeAutoManualProto400();
		}

		internal void subscribeSelectorSocketInfo250() {
			if (this._acListener != null)
				_acListener.subscribeSelectorSocketInfo250();
		}

		internal void subscribeUserData240() {
			if (this._acListener != null)
				_acListener.subscribeUserData240();
		}

		internal void subscribeMultiIdent151() {
			if (this._acListener != null)
				_acListener.subscribeMultiIdent151();
		}

		internal void subscribeRelayFunction216() {
			if (this._acListener != null)
				_acListener.subscribeRelayFunction216();
		}

		internal void unsubscribeAlarm73() {
			if (this._acListener != null)
				_acListener.unsubscribeAlarm73();
		}

		internal void unsubscribeLastTightening63() {
			if (this._acListener != null)
				_acListener.unsubscribeLastTightening63();
		}

		internal void subscribeJobLineInfo120() {
			if (this._acListener != null)
				_acListener.subscribeJobLineInfo120();
		}

		internal void subscribeAlarm() {
			if (this._acListener != null)
				_acListener.subscribeAlarm();
		}

		internal void subscribeExtInputs210() {
			if (this._acListener != null)
				_acListener.subscribeExtInputs210();
		}

		internal void setVinNumber() {
			if (this._acListener != null) {
				if (!string.IsNullOrWhiteSpace(vinNumber))

					_acListener.setVinNumber(vinNumber);
			}
		}

		#region methods
		internal void createListener(string addr, int nport) {
			if (_acListener == null) {
				_acListener = new ACListener(addr, nport);
				_acListener.start();
				this.allowDeviceSelection = false;
			}
		}
		#endregion

		#region properties
		internal ACListener listener { get { return _acListener; } }

		/// <summary>backing-store for property windowWidth of type <b>double</b>.</summary>
		/// <seealso name="windowWidth"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		double _windowWidth;

		/// <summary>property windowWidth.</summary>
		/// <seealso name="_windowWidth"/>
		public double windowWidth {
			get { return _windowWidth; }
			set { _windowWidth = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}

		/// <summary>backing-store for property windowHeight of type <b>double</b>.</summary>
		/// <seealso name="windowHeight"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		double _windowHeight;

		/// <summary>property windowHeight.</summary>
		/// <seealso name="_windowHeight"/>
		public double windowHeight {
			get { return _windowHeight; }
			set { _windowHeight = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}

		/// <summary>backing-store for property windowLeft of type <b>double</b>.</summary>
		/// <seealso name="windowLeft"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		double _windowLeft;

		/// <summary>property windowLeft.</summary>
		/// <seealso name="_windowLeft"/>
		public double windowLeft {
			get { return _windowLeft; }
			set { _windowLeft = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}


		/// <summary>backing-store for property windowTop of type <b>double</b>.</summary>
		/// <seealso name="windowTop"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		double _windowTop;

		/// <summary>property windowTop.</summary>
		/// <seealso name="_windowTop"/>
		public double windowTop {
			get { return _windowTop; }
			set { _windowTop = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}


		/// <summary>backing-store for property windowTitle of type <b>string</b>.</summary>
		/// <seealso name="windowTitle"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		string _windowTitle;
		private readonly IColtLogger logger;

		//#if KENNY
		//		ACListener<MID> _acListener;
		//#else
		//#endif

		/// <summary>property windowTitle.</summary>
		/// <seealso name="_windowTitle"/>
		public string windowTitle {
			get { return _windowTitle; }
			set { _windowTitle = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}

		public string defaultController { get; private set; }

		//private ObservableCollection<AtlasCopcoController> atlasCopcoControllers;

		#endregion

		/// <summary>backing-store for property atlasCopcoConrollers of type <b>ObservableCollection&lt;AtlasCopcoController&gt;</b>.</summary>
		/// <seealso name="atlasCopcoConrollers"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		ObservableCollection<AtlasCopcoController>_atlasCopcoControllers;

		/// <summary>property atlasCopcoConrollers.</summary>
		/// <seealso name="_atlasCopcoConrollers"/>
		public ObservableCollection<AtlasCopcoController> atlasCopcoControllers {
			get { return _atlasCopcoControllers; }
			set { _atlasCopcoControllers = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}

		/// <summary>backing-store for property selectedController of type <b>AtlasCopcoController</b>.</summary>
		/// <seealso name="selectedController"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		AtlasCopcoController _selectedController;

		/// <summary>property selectedController.</summary>
		/// <seealso name="_selectedController"/>
		public AtlasCopcoController selectedController {
			get { return _selectedController; }
			set {
				_selectedController = value; firePropertyChanged(MethodBase.GetCurrentMethod());

				this.selectedIPAddress = selectedController == null ? null : _selectedController.ipAddress;
				if (selectedController == null)
					this.selectedPortNumber = null;
				else
					this.selectedPortNumber = _selectedController.portNumber;
				firePropertyChanged("selectedIPAddress");
				firePropertyChanged("selectedPortNumber");
			}
		}

		/// <summary>property selectedIPAddress.</summary>
		/// <seealso name="_selectedIPAddress"/>
		public string selectedIPAddress { get; private set; }

		/// <summary>property selectedPortNUmber.</summary>
		/// <seealso name="_selectedPortNUmber"/>
		public Nullable<int> selectedPortNumber { get; private set; }

		/// <summary>backing-store for property allowDeviceSelection of type <b>bool</b>.</summary>
		/// <seealso name="allowDeviceSelection"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		bool _allowDeviceSelection;

		/// <summary>property allowDeviceSelection.</summary>
		/// <seealso name="_allowDeviceSelection"/>
		public bool allowDeviceSelection {
			get { return _allowDeviceSelection; }
			set {
				_allowDeviceSelection = value; firePropertyChanged(MethodBase.GetCurrentMethod());
				firePropertyChanged("deviceConnected");
			}
		}

		public bool deviceConnected { get { return !allowDeviceSelection; } }

		bool? _isAutostartChecked;

		public bool? isAutostartChecked {
			get { return _isAutostartChecked; }

			set {
				bool prev=_isAutostartChecked.HasValue ? _isAutostartChecked.Value:false;

				_isAutostartChecked = value;
				if (prev != value)
					saveAutostartSetting(value.HasValue ? value.Value : false);
				firePropertyChanged(MethodBase.GetCurrentMethod());
			}
		}


		/// <summary>backing-store for property vinNumber of type <b>string</b>.</summary>
		/// <seealso name="vinNumber"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		string _vinNumber;

		/// <summary>property vinNumber.</summary>
		/// <seealso name="_vinNumber"/>
		public string vinNumber {
			get { return _vinNumber; }
			set { _vinNumber = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}

	}

	[TypeConverter(typeof(AtlasCopcoControllerConverter))]
	public class AtlasCopcoController {
		//private readonly string ipAddress;

		internal AtlasCopcoController() { }
		internal AtlasCopcoController(string ipaddr, int nport, string desc) : this() {
			//AtlasCopcoController
			ipAddress = ipaddr;
			portNumber = nport;
			controllerDescription = desc;
		}

		public string ipAddress { get; private set; }
		public int portNumber { get; private set; }
		public string controllerDescription { get; private set; }



	}
	public class AtlasCopcoControllerConverter : TypeConverter {
		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) {
			bool ret = base.CanConvertFrom(context, sourceType);
			Utility.logger.log(MethodBase.GetCurrentMethod(), "From=" + sourceType.FullName + " returning " + ret);
			return ret;
		}
		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) {
			object ret = null;

			try {
				ret = base.ConvertFrom(context, culture, value);
			} catch (NotSupportedException nse) {
				Utility.logger.log(MethodBase.GetCurrentMethod(), nse);

				foreach (string str in Enum.GetNames(typeof(AtlasCopcoController))) {
					Utility.logger.log("blah");

				}
				//var avar = Enum.GetName(typeof(AtlasCopcoController), value);
				Utility.logger.log("blah");
			} catch (Exception ex) {
				Utility.logger.log(MethodBase.GetCurrentMethod(), ex);
			}
			Utility.logger.log(MethodBase.GetCurrentMethod());
			return ret;
		}
		public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) {
			bool ret = base.CanConvertTo(context, destinationType);
			Utility.logger.log(MethodBase.GetCurrentMethod(), "To=" + destinationType.FullName + " returning " + ret);
			return ret;
		}
		public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) {
			Utility.logger.log(MethodBase.GetCurrentMethod());
			return base.ConvertTo(context, culture, value, destinationType);
		}
	}
}