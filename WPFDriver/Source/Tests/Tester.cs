//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tests {
    using System.Diagnostics;
    
    public class Tester {
        public void runTests() {
            new TestMID_0001().runTests();
            new TestMID_0002().runTests();
            new TestMID_0003().runTests();
            new TestMID_0004().runTests();
            new TestMID_0005().runTests();
            new TestMID_0006().runTests();
            new TestMID_0010().runTests();
            new TestMID_0011().runTests();
            new TestMID_0012().runTests();
            new TestMID_0013().runTests();
            new TestMID_0014().runTests();
            new TestMID_0015().runTests();
            new TestMID_0016().runTests();
            new TestMID_0017().runTests();
            new TestMID_0018().runTests();
            new TestMID_0019().runTests();
            new TestMID_0020().runTests();
            new TestMID_0021().runTests();
            new TestMID_0022().runTests();
            new TestMID_0023().runTests();
            new TestMID_0024().runTests();
            new TestMID_0030().runTests();
            new TestMID_0031().runTests();
            new TestMID_0032().runTests();
            new TestMID_0033().runTests();
            new TestMID_0034().runTests();
            new TestMID_0035().runTests();
            new TestMID_0036().runTests();
            new TestMID_0037().runTests();
            new TestMID_0038().runTests();
            new TestMID_0040().runTests();
            new TestMID_0041().runTests();
            new TestMID_0042().runTests();
            new TestMID_0043().runTests();
            new TestMID_0044().runTests();
            new TestMID_0045().runTests();
            new TestMID_0046().runTests();
            new TestMID_0047().runTests();
            new TestMID_0048().runTests();
            new TestMID_0050().runTests();
            new TestMID_0051().runTests();
            new TestMID_0052().runTests();
            new TestMID_0053().runTests();
            new TestMID_0054().runTests();
            new TestMID_0060().runTests();
            new TestMID_0061().runTests();
            new TestMID_0062().runTests();
            new TestMID_0063().runTests();
            new TestMID_0064().runTests();
            new TestMID_0065().runTests();
            new TestMID_0070().runTests();
            new TestMID_0071().runTests();
            new TestMID_0072().runTests();
            new TestMID_0073().runTests();
            new TestMID_0074().runTests();
            new TestMID_0075().runTests();
            new TestMID_0076().runTests();
            new TestMID_0077().runTests();
            new TestMID_0078().runTests();
            new TestMID_0080().runTests();
            new TestMID_0081().runTests();
            new TestMID_0082().runTests();
            new TestMID_0090().runTests();
            new TestMID_0091().runTests();
            new TestMID_0092().runTests();
            new TestMID_0105().runTests();
            new TestMID_0106().runTests();
            new TestMID_0107().runTests();
            new TestMID_0108().runTests();
            new TestMID_0109().runTests();
            new TestMID_0110().runTests();
            new TestMID_0111().runTests();
            new TestMID_0113().runTests();
            new TestMID_0120().runTests();
            new TestMID_0121().runTests();
            new TestMID_0122().runTests();
            new TestMID_0123().runTests();
            new TestMID_0124().runTests();
            new TestMID_0125().runTests();
            new TestMID_0126().runTests();
            new TestMID_0127().runTests();
            new TestMID_0128().runTests();
            new TestMID_0129().runTests();
            new TestMID_0130().runTests();
            new TestMID_0131().runTests();
            new TestMID_0132().runTests();
            new TestMID_0133().runTests();
            new TestMID_0140().runTests();
            new TestMID_0150().runTests();
            new TestMID_0151().runTests();
            new TestMID_0152().runTests();
            new TestMID_0153().runTests();
            new TestMID_0154().runTests();
            new TestMID_0155().runTests();
            new TestMID_0156().runTests();
            new TestMID_0157().runTests();
            new TestMID_0200().runTests();
            new TestMID_0210().runTests();
            new TestMID_0211().runTests();
            new TestMID_0212().runTests();
            new TestMID_0213().runTests();
            new TestMID_0214().runTests();
            new TestMID_0216().runTests();
            new TestMID_0217().runTests();
            new TestMID_0218().runTests();
            new TestMID_0219().runTests();
            new TestMID_0220().runTests();
            new TestMID_0221().runTests();
            new TestMID_0222().runTests();
            new TestMID_0223().runTests();
            new TestMID_0224().runTests();
            new TestMID_0225().runTests();
            new TestMID_0240().runTests();
            new TestMID_0241().runTests();
            new TestMID_0242().runTests();
            new TestMID_0243().runTests();
            new TestMID_0244().runTests();
            new TestMID_0245().runTests();
            new TestMID_0250().runTests();
            new TestMID_0251().runTests();
            new TestMID_0252().runTests();
            new TestMID_0253().runTests();
            new TestMID_0254().runTests();
            new TestMID_0255().runTests();
            new TestMID_0260().runTests();
            new TestMID_0261().runTests();
            new TestMID_0262().runTests();
            new TestMID_0263().runTests();
            new TestMID_0264().runTests();
            new TestMID_0265().runTests();
            new TestMID_0270().runTests();
            new TestMID_0300().runTests();
            new TestMID_0301().runTests();
            new TestMID_0400().runTests();
            new TestMID_0401().runTests();
            new TestMID_0402().runTests();
            new TestMID_0403().runTests();
            new TestMID_0410().runTests();
            new TestMID_0411().runTests();
            new TestMID_0420().runTests();
            new TestMID_0421().runTests();
            new TestMID_0422().runTests();
            new TestMID_0423().runTests();
            new TestMID_0500().runTests();
            new TestMID_0501().runTests();
            new TestMID_0502().runTests();
            new TestMID_0503().runTests();
            new TestMID_0504().runTests();
            new TestMID_2504().runTests();
            new TestMID_9999().runTests();
        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Communication.MID_0001</para></remarks>
    public class TestMID_0001 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Communication.MID_0001 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0001 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001(1);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0001 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001(2);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0001 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001(3);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0001 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001(4);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0001 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0001(5);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Communication.MID_0002</para></remarks>
    public class TestMID_0002 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
            testRevision6();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Communication.MID_0002 mid) {
            mid.CellID = 0;
            mid.ChannelID = 0;
            mid.ControllerName = "STRING";
            mid.SupplierCode = "STRING";
            mid.OpenProtocolVersion = "STRING";
            mid.ControllerSoftwareVersion = "STRING";
            mid.ToolSoftwareVersion = "STRING";
            mid.RBUType = "STRING";
            mid.ControllerSerialNumber = "STRING";
            mid.SystemType = OpenProtocolInterpreter.MIDs.Communication.MID_0002.SystemTypes.SYSTEM_TYPE_NOT_SET;
            mid.SystemSubType = 0;
            mid.SequenceNumberSupport = false;
            mid.LinkingHandlingSupport = false;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0002 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002(1);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0002 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002(2);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0002 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002(3);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0002 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002(4);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0002 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002(5);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
        void testRevision6() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.MIDs.Communication.MID_0002 mid;
            string package;

            // Revision 6.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 6.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0002(6);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Communication.MID_0003</para></remarks>
    public class TestMID_0003 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Communication.MID_0003 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Communication.MID_0003 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0003();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Communication.MID_0004</para></remarks>
    public class TestMID_0004 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Communication.MID_0004 mid) {
            mid.FailedMid = 0;
            mid.ErrorCode = OpenProtocolInterpreter.MIDs.Communication.MID_0004.Errors.NO_ERROR;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Communication.MID_0004 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0004();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0004(0, 0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0004(0, OpenProtocolInterpreter.MIDs.Communication.MID_0004.Errors.NO_ERROR);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Communication.MID_0005</para></remarks>
    public class TestMID_0005 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Communication.MID_0005 mid) {
            mid.MIDAccepted = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Communication.MID_0005 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0005();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0005(0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Communication.MID_0006</para></remarks>
    public class TestMID_0006 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Communication.MID_0006 mid) {
            mid.MIDAccepted = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Communication.MID_0006 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Communication.MID_0006();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0010</para></remarks>
    public class TestMID_0010 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0010 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0010 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0010();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0011</para></remarks>
    public class TestMID_0011 {
        public void runTests() {
            testRevision1();
        }
        // adding NULL for unknown type: System.Collections.Generic.List`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0011 mid) {
/*
            mid.TotalParameterSets = 0;
*/
            mid.ParameterSets = null;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0011 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0011();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0011(new int[1]);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0012</para></remarks>
    public class TestMID_0012 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0012 mid) {
            mid.ParameterSetID = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0012 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0012();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0012(0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0013</para></remarks>
    public class TestMID_0013 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0013 mid) {
            mid.ParameterSetID = 0;
            mid.ParameterSetName = "STRING";
            mid.RotationDirection = OpenProtocolInterpreter.MIDs.ParameterSet.MID_0013.RotationDirections.CLOCKWISE;
            mid.BatchSize = 0;
            mid.MinTorque = 0m;
            mid.MaxTorque = 0m;
            mid.TorqueFinalTarget = 0m;
            mid.MinAngle = 0;
            mid.MaxAngle = 0;
            mid.AngleFinalTarget = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0013 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0013();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0013(0, "STRING", OpenProtocolInterpreter.MIDs.ParameterSet.MID_0013.RotationDirections.CLOCKWISE, 0, 0m, 0m, 0m, 0, 0, 0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0014</para></remarks>
    public class TestMID_0014 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0014 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0014 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0014();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0015</para></remarks>
    public class TestMID_0015 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0015 mid) {
            mid.ParameterSetID = 0;
            mid.LastChangeInParameterSet = System.DateTime.Now;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0015 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0015();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0015(0, System.DateTime.Now);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0016</para></remarks>
    public class TestMID_0016 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0016 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0016 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0016();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0017</para></remarks>
    public class TestMID_0017 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0017 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0017 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0017();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0018</para></remarks>
    public class TestMID_0018 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0018 mid) {
            mid.ParameterSetID = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0018 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0018();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0018(0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0019</para></remarks>
    public class TestMID_0019 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0019 mid) {
            mid.ParameterSetID = 0;
            mid.BatchSize = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0019 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0019();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0019(0, 0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0020</para></remarks>
    public class TestMID_0020 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0020 mid) {
            mid.ParameterSetID = 0;
            mid.BatchSize = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0020 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0020();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0021</para></remarks>
    public class TestMID_0021 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0021 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0021 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0021();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0022</para></remarks>
    public class TestMID_0022 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0022 mid) {
            mid.RelayStatus = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0022 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0022();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0022(false);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0023</para></remarks>
    public class TestMID_0023 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0023 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0023 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0023();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_0024</para></remarks>
    public class TestMID_0024 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_0024 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_0024 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_0024();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0030</para></remarks>
    public class TestMID_0030 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0030 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0030 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0030();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0031</para></remarks>
    public class TestMID_0031 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0031 mid) {
/*
            mid.TotalJobs = 0;
*/
            mid.JobIds = null;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0031 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0031();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0032</para></remarks>
    public class TestMID_0032 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0032 mid) {
            mid.JobID = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0032 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0032();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0032(0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0033</para></remarks>
    public class TestMID_0033 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)OpenProtocolInterpreter.MIDs.Job.MID_0033+JobDatas!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0033 mid) {
            mid.JobData = new OpenProtocolInterpreter.MIDs.Job.MID_0033.JobDatas();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0033 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0033();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0034</para></remarks>
    public class TestMID_0034 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0034 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0034 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0034();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0035</para></remarks>
    public class TestMID_0035 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0035 mid) {
            mid.JobID = 0;
            mid.JobStatus = OpenProtocolInterpreter.MIDs.Job.MID_0035.JobStatuses.NOT_COMPLETED;
            mid.JobBatchMode = OpenProtocolInterpreter.MIDs.Job.MID_0035.JobBatchModes.ONLY_OK;
            mid.JobBatchSize = 0;
            mid.JobBatchCounter = 0;
            mid.TimeStamp = System.DateTime.Now;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0035 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0035();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0035(0, 0, 0, 0, 0, System.DateTime.Now);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0035(0, OpenProtocolInterpreter.MIDs.Job.MID_0035.JobStatuses.NOT_COMPLETED, OpenProtocolInterpreter.MIDs.Job.MID_0035.JobBatchModes.ONLY_OK, 0, 0, System.DateTime.Now);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0036</para></remarks>
    public class TestMID_0036 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0036 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0036 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0036();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0037</para></remarks>
    public class TestMID_0037 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0037 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0037 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0037();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.MID_0038</para></remarks>
    public class TestMID_0038 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.MID_0038 mid) {
            mid.JobID = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.MID_0038 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0038();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.MID_0038(0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0040</para></remarks>
    public class TestMID_0040 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0040 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0040 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0040();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0041</para></remarks>
    public class TestMID_0041 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0041 mid) {
            mid.ToolSerialNumber = "STRING";
            mid.ToolNumberOfTIghtenings = 0;
            mid.LastCalibrationDate = System.DateTime.Now;
            mid.ControllerSerialNumber = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0041 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0041();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0042</para></remarks>
    public class TestMID_0042 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0042 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0042 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0042();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0043</para></remarks>
    public class TestMID_0043 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0043 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0043 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0043();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0044</para></remarks>
    public class TestMID_0044 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0044 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0044 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0044();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0045</para></remarks>
    public class TestMID_0045 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0045 mid) {
            mid.CalibrationValueUnit = OpenProtocolInterpreter.MIDs.Tool.MID_0045.CalibrationValueUnits.NM;
            mid.CalibrationValue = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0045 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0045();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0046</para></remarks>
    public class TestMID_0046 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0046 mid) {
            mid.PrimaryTool = OpenProtocolInterpreter.MIDs.Tool.MID_0046.PrimaryTools.CABLE;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0046 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0046();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0047</para></remarks>
    public class TestMID_0047 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0047 mid) {
            mid.PairingHandlingType = OpenProtocolInterpreter.MIDs.Tool.MID_0047.PairingHandlingTypes.START_PAIRING;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0047 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0047();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tool.MID_0048</para></remarks>
    public class TestMID_0048 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tool.MID_0048 mid) {
            mid.PairingStatus = OpenProtocolInterpreter.MIDs.Tool.MID_0048.PairingStatuses.UNDEFINED;
            mid.TimeStamp = System.DateTime.Now;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tool.MID_0048 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tool.MID_0048();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.VIN.MID_0050</para></remarks>
    public class TestMID_0050 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.VIN.MID_0050 mid) {
            mid.VINNumber = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.VIN.MID_0050 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.VIN.MID_0050();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.VIN.MID_0051</para></remarks>
    public class TestMID_0051 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.VIN.MID_0051 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.VIN.MID_0051 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.VIN.MID_0051();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.VIN.MID_0052</para></remarks>
    public class TestMID_0052 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.VIN.MID_0052 mid) {
            mid.VINNumber = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.VIN.MID_0052 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.VIN.MID_0052();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.VIN.MID_0053</para></remarks>
    public class TestMID_0053 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.VIN.MID_0053 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.VIN.MID_0053 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.VIN.MID_0053();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.VIN.MID_0054</para></remarks>
    public class TestMID_0054 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.VIN.MID_0054 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.VIN.MID_0054 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.VIN.MID_0054();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tightening.MID_0060</para></remarks>
    public class TestMID_0060 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tightening.MID_0060 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tightening.MID_0060 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tightening.MID_0060();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tightening.MID_0061</para></remarks>
    public class TestMID_0061 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tightening.MID_0061 mid) {
            mid.CellID = 0;
            mid.ChannelID = 0;
            mid.TorqueControllerName = "STRING";
            mid.VINNumber = "STRING";
            mid.JobID = 0;
            mid.ParameterSetID = 0;
            mid.BatchSize = 0;
            mid.BatchCounter = 0;
            mid.TighteningStatus = false;
            mid.TorqueStatus = OpenProtocolInterpreter.MIDs.Tightening.MID_0061.TighteningValuesStatuses.LOW;
            mid.AngleStatus = OpenProtocolInterpreter.MIDs.Tightening.MID_0061.TighteningValuesStatuses.LOW;
            mid.TorqueMinLimit = 0m;
            mid.TorqueMaxLimit = 0m;
            mid.TorqueFinalTarget = 0m;
            mid.Torque = 0m;
            mid.AngleMinLimit = 0;
            mid.AngleMaxLimit = 0;
            mid.AngleFinalTarget = 0;
            mid.Angle = 0;
            mid.TimeStamp = System.DateTime.Now;
            mid.LastChangeInParameterSet = System.DateTime.Now;
            mid.BatchStatus = OpenProtocolInterpreter.MIDs.Tightening.MID_0061.BatchStatuses.NOK;
            mid.TighteningID = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tightening.MID_0061 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tightening.MID_0061();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tightening.MID_0062</para></remarks>
    public class TestMID_0062 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tightening.MID_0062 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tightening.MID_0062 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tightening.MID_0062();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tightening.MID_0063</para></remarks>
    public class TestMID_0063 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tightening.MID_0063 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tightening.MID_0063 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tightening.MID_0063();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tightening.MID_0064</para></remarks>
    public class TestMID_0064 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tightening.MID_0064 mid) {
            mid.TighteningID = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tightening.MID_0064 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tightening.MID_0064();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tightening.MID_0064(0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Tightening.MID_0065</para></remarks>
    public class TestMID_0065 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Tightening.MID_0065 mid) {
            mid.TighteningID = 0;
            mid.VINNumber = "STRING";
            mid.ParameterSetID = 0;
            mid.BatchCounter = 0;
            mid.TighteningStatus = false;
            mid.TorqueStatus = OpenProtocolInterpreter.MIDs.Tightening.MID_0065.TighteningValuesStatuses.LOW;
            mid.AngleStatus = OpenProtocolInterpreter.MIDs.Tightening.MID_0065.TighteningValuesStatuses.LOW;
            mid.Torque = 0m;
            mid.Angle = 0;
            mid.TimeStamp = System.DateTime.Now;
            mid.BatchStatus = OpenProtocolInterpreter.MIDs.Tightening.MID_0065.BatchStatuses.NOK;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Tightening.MID_0065 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Tightening.MID_0065();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0070</para></remarks>
    public class TestMID_0070 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0070 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0070 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0070();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0071</para></remarks>
    public class TestMID_0071 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)OpenProtocolInterpreter.MIDs.Alarm.MID_0071+Alarms!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0071 mid) {
            mid.AlarmData = new OpenProtocolInterpreter.MIDs.Alarm.MID_0071.Alarms();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0071 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0071();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0072</para></remarks>
    public class TestMID_0072 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0072 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0072 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0072();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0073</para></remarks>
    public class TestMID_0073 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0073 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0073 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0073();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0074</para></remarks>
    public class TestMID_0074 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0074 mid) {
            mid.ErrorCode = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0074 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0074();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0074("STRING");
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0075</para></remarks>
    public class TestMID_0075 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0075 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0075 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0075();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0076</para></remarks>
    public class TestMID_0076 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)OpenProtocolInterpreter.MIDs.Alarm.MID_0076+AlarmStatusesData!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0076 mid) {
            mid.AlarmStatusData = new OpenProtocolInterpreter.MIDs.Alarm.MID_0076.AlarmStatusesData();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0076 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0076();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0077</para></remarks>
    public class TestMID_0077 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0077 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0077 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0077();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Alarm.MID_0078</para></remarks>
    public class TestMID_0078 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Alarm.MID_0078 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Alarm.MID_0078 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Alarm.MID_0078();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Time.MID_0080</para></remarks>
    public class TestMID_0080 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Time.MID_0080 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Time.MID_0080 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Time.MID_0080();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Time.MID_0081</para></remarks>
    public class TestMID_0081 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Time.MID_0081 mid) {
            mid.Time = System.DateTime.Now;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Time.MID_0081 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Time.MID_0081();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Time.MID_0082</para></remarks>
    public class TestMID_0082 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Time.MID_0082 mid) {
            mid.Time = System.DateTime.Now;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Time.MID_0082 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Time.MID_0082();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0090</para></remarks>
    public class TestMID_0090 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0090 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0090 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0090();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0091</para></remarks>
    public class TestMID_0091 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0091+MultiSpindlesData!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0091 mid) {
            mid.MultiSpindleData = new OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0091.MultiSpindlesData();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0091 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0091();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0092</para></remarks>
    public class TestMID_0092 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0092 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0092 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultiSpindle.Status.MID_0092();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PowerMACS.MID_0105</para></remarks>
    public class TestMID_0105 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PowerMACS.MID_0105 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PowerMACS.MID_0105 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PowerMACS.MID_0105();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106</para></remarks>
    public class TestMID_0106 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)System.Collections.Generic.List`1[[OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106+BoltData, OpenProtocolInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]!
        // adding unknown type: (inner class)System.Collections.Generic.List`1[[OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106+SpecialValue, OpenProtocolInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106 mid) {
            mid.TotalNumberOfMessages = 0;
            mid.MessageNumber = 0;
            mid.DataNumberSystem = 0;
            mid.StationNumber = 0;
            mid.StationName = "STRING";
            mid.Time = System.DateTime.Now;
            mid.ModeNumber = 0;
            mid.ModeName = "STRING";
            mid.SimpleStatus = false;
            mid.PMStatus = OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106.PowerMacsStatuses.OK;
            mid.WpId = "STRING";
            mid.NumberOfBolts = 0;
            mid.BoltsData = new System.Collections.Generic.List<OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106.BoltData>();
            mid.SpecialValues = new System.Collections.Generic.List<OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106.SpecialValue>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PowerMACS.MID_0106();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107</para></remarks>
    public class TestMID_0107 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)System.Collections.Generic.List`1[[OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107+BoltResult, OpenProtocolInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]!
        // adding unknown type: (inner class)System.Collections.Generic.List`1[[OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107+StepResult, OpenProtocolInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]!
        // adding unknown type: (inner class)System.Collections.Generic.List`1[[OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107+SpecialValue, OpenProtocolInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107 mid) {
            mid.TotalNumberOfMessages = 0;
            mid.MessageNumber = 0;
            mid.DataNumberSystem = 0;
            mid.StationNumber = 0;
            mid.Time = System.DateTime.Now;
            mid.BoltNumber = 0;
            mid.BoltName = "STRING";
            mid.ProgramName = "STRING";
            mid.PMStatus = OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107.PowerMacsStatuses.OK;
            mid.Errors = "STRING";
            mid.CustomerErrorCode = "STRING";
            mid.BoltResults = new System.Collections.Generic.List<OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107.BoltResult>();
            mid.AllStepDataSent = false;
            mid.StepResults = new System.Collections.Generic.List<OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107.StepResult>();
            mid.SpecialValues = new System.Collections.Generic.List<OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107.SpecialValue>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PowerMACS.MID_0107();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PowerMACS.MID_0108</para></remarks>
    public class TestMID_0108 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PowerMACS.MID_0108 mid) {
            mid.BoltData = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PowerMACS.MID_0108 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PowerMACS.MID_0108();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PowerMACS.MID_0109</para></remarks>
    public class TestMID_0109 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PowerMACS.MID_0109 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PowerMACS.MID_0109 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PowerMACS.MID_0109();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.UserInterface.MID_0110</para></remarks>
    public class TestMID_0110 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.UserInterface.MID_0110 mid) {
            mid.UserText = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.UserInterface.MID_0110 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.UserInterface.MID_0110();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.UserInterface.MID_0111</para></remarks>
    public class TestMID_0111 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.UserInterface.MID_0111 mid) {
            mid.TextDuration = 0;
            mid.RemovalCondition = OpenProtocolInterpreter.MIDs.UserInterface.MID_0111.RemovalConditions.ACKNOWLEDGE_OR_WAIT_EXPIRATION_TIME;
            mid.Line1 = "STRING";
            mid.Line2 = "STRING";
            mid.Line3 = "STRING";
            mid.Line4 = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.UserInterface.MID_0111 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.UserInterface.MID_0111();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.UserInterface.MID_0113</para></remarks>
    public class TestMID_0113 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.UserInterface.MID_0113 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.UserInterface.MID_0113 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.UserInterface.MID_0113();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0120</para></remarks>
    public class TestMID_0120 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0120 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0120 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0120();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0121</para></remarks>
    public class TestMID_0121 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0121 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0121 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0121();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0122</para></remarks>
    public class TestMID_0122 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0122 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0122 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0122();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0123</para></remarks>
    public class TestMID_0123 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0123 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0123 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0123();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0124</para></remarks>
    public class TestMID_0124 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0124 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0124 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0124();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0125</para></remarks>
    public class TestMID_0125 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0125 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0125 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0125();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0126</para></remarks>
    public class TestMID_0126 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0126 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0126 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0126();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0127</para></remarks>
    public class TestMID_0127 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0127 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0127 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0127();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0128</para></remarks>
    public class TestMID_0128 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0128 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0128 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0128();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0129</para></remarks>
    public class TestMID_0129 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0129 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0129 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0129();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0130</para></remarks>
    public class TestMID_0130 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0130 mid) {
            mid.JobOffStatus = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0130 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0130();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0131</para></remarks>
    public class TestMID_0131 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0131 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0131 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0131();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0132</para></remarks>
    public class TestMID_0132 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0132 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0132 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0132();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0133</para></remarks>
    public class TestMID_0133 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0133 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0133 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0133();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140</para></remarks>
    public class TestMID_0140 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)System.Collections.Generic.List`1[[OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140+Job, OpenProtocolInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140 mid) {
            mid.JobID = 0;
            mid.JobName = "STRING";
            mid.NumberOfParameterSets = 0;
            mid.JobList = new System.Collections.Generic.List<OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140.Job>();
            mid.ForcedOrder = OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140.ForcedOrders.FREE_ORDER;
            mid.LockAtJobDone = false;
            mid.ToolLoosening = OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140.ToolLoosenings.ENABLED;
            mid.RepeatJob = false;
            mid.BatchMode = OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140.BatchModes.ONLY_OK;
            mid.BatchStatusAtIncrement = false;
            mid.DecrementBatchAtOKLoosening = false;
            mid.MaxTimeForFirstTightening = 0;
            mid.MaxTimeToCompleteJob = 0;
            mid.DisplayResultAtAutoSelect = 0;
            mid.UsingLineControl = false;
            mid.IdentifierResultPartOne = OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140.IdentifierPart.JOB_VIN_NUMBER;
            mid.ResultOfNonTightenings = false;
            mid.ResetAllIdentifiersAtJobDone = false;
            mid.Reserved = OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140.Reserveds.E;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Job.Advanced.MID_0140();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0150</para></remarks>
    public class TestMID_0150 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0150 mid) {
            mid.IdentifierData = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0150 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0150();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0150("STRING");
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0151</para></remarks>
    public class TestMID_0151 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0151 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0151 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0151();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152</para></remarks>
    public class TestMID_0152 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152+IdentifierStatus!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152 mid) {
            mid.FirstIdentifierStatus = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152.IdentifierStatus();
            mid.SecondIdentifierStatus = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152.IdentifierStatus();
            mid.ThirdIdentifierStatus = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152.IdentifierStatus();
            mid.FourthIdentifierStatus = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152.IdentifierStatus();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0152();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0153</para></remarks>
    public class TestMID_0153 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0153 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0153 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0153();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0154</para></remarks>
    public class TestMID_0154 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0154 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0154 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0154();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0155</para></remarks>
    public class TestMID_0155 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0155 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0155 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0155();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0156</para></remarks>
    public class TestMID_0156 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0156 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0156 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0156();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0157</para></remarks>
    public class TestMID_0157 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0157 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0157 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MultipleIdentifiers.MID_0157();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0200</para></remarks>
    public class TestMID_0200 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0200 mid) {
            mid.StatusRelayOne = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelayTwo = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelayThree = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelayFour = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelayFive = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelaySix = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelaySeven = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelayEight = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelayNine = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
            mid.StatusRelayTen = OpenProtocolInterpreter.MIDs.IOInterface.MID_0200.RelayStatuses.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0200 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0200();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0210</para></remarks>
    public class TestMID_0210 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0210 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0210 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0210();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0211</para></remarks>
    public class TestMID_0211 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0211 mid) {
            mid.StatusDigInOne = false;
            mid.StatusDigInTwo = false;
            mid.StatusDigInThree = false;
            mid.StatusDigInFour = false;
            mid.StatusDigInFive = false;
            mid.StatusDigInSix = false;
            mid.StatusDigInSeven = false;
            mid.StatusDigInEight = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0211 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0211();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0212</para></remarks>
    public class TestMID_0212 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0212 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0212 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0212();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0213</para></remarks>
    public class TestMID_0213 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0213 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0213 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0213();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0214</para></remarks>
    public class TestMID_0214 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0214 mid) {
            mid.DeviceNumber = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0214 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0214();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0214(0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0216</para></remarks>
    public class TestMID_0216 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0216 mid) {
            mid.RelayNumber = OpenProtocolInterpreter.MIDs.IOInterface.Relay.RelayNumbers.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0216 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0216();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0217</para></remarks>
    public class TestMID_0217 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0217 mid) {
            mid.RelayNumber = OpenProtocolInterpreter.MIDs.IOInterface.Relay.RelayNumbers.OFF;
            mid.RelayStatus = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0217 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0217();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0218</para></remarks>
    public class TestMID_0218 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0218 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0218 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0218();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0219</para></remarks>
    public class TestMID_0219 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0219 mid) {
            mid.RelayNumber = OpenProtocolInterpreter.MIDs.IOInterface.Relay.RelayNumbers.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0219 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0219();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0220</para></remarks>
    public class TestMID_0220 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0220 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.MIDs.IOInterface.DigitalInput.DigitalInputNumbers.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0220 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0220();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0221</para></remarks>
    public class TestMID_0221 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0221 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.MIDs.IOInterface.DigitalInput.DigitalInputNumbers.OFF;
            mid.DigitalInputStatus = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0221 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0221();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0222</para></remarks>
    public class TestMID_0222 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0222 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0222 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0222();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0223</para></remarks>
    public class TestMID_0223 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0223 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.MIDs.IOInterface.DigitalInput.DigitalInputNumbers.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0223 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0223();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0224</para></remarks>
    public class TestMID_0224 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0224 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.MIDs.IOInterface.DigitalInput.DigitalInputNumbers.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0224 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0224();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.IOInterface.MID_0225</para></remarks>
    public class TestMID_0225 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.IOInterface.MID_0225 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.MIDs.IOInterface.DigitalInput.DigitalInputNumbers.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.IOInterface.MID_0225 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.IOInterface.MID_0225();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PLCUserData.MID_0240</para></remarks>
    public class TestMID_0240 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PLCUserData.MID_0240 mid) {
            mid.UserData = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PLCUserData.MID_0240 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PLCUserData.MID_0240();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PLCUserData.MID_0241</para></remarks>
    public class TestMID_0241 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PLCUserData.MID_0241 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PLCUserData.MID_0241 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PLCUserData.MID_0241();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PLCUserData.MID_0242</para></remarks>
    public class TestMID_0242 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PLCUserData.MID_0242 mid) {
            mid.UserData = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PLCUserData.MID_0242 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PLCUserData.MID_0242();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PLCUserData.MID_0243</para></remarks>
    public class TestMID_0243 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PLCUserData.MID_0243 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PLCUserData.MID_0243 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PLCUserData.MID_0243();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PLCUserData.MID_0244</para></remarks>
    public class TestMID_0244 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PLCUserData.MID_0244 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PLCUserData.MID_0244 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PLCUserData.MID_0244();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.PLCUserData.MID_0245</para></remarks>
    public class TestMID_0245 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.PLCUserData.MID_0245 mid) {
            mid.Offset = 0;
            mid.UserData = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.PLCUserData.MID_0245 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.PLCUserData.MID_0245();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0250</para></remarks>
    public class TestMID_0250 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0250 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0250 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0250();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0251</para></remarks>
    public class TestMID_0251 {
        public void runTests() {
            testRevision1();
        }
        // adding NULL for unknown type: System.Collections.Generic.List`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0251 mid) {
            mid.DeviceID = 0;
            mid.NumberOfSockets = 0;
            mid.SocketStatuses = null;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0251 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0251();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0252</para></remarks>
    public class TestMID_0252 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0252 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0252 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0252();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0253</para></remarks>
    public class TestMID_0253 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0253 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0253 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0253();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0254</para></remarks>
    public class TestMID_0254 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)System.Collections.Generic.List`1[[OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0254+GreenLightCommand, OpenProtocolInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0254 mid) {
            mid.DeviceID = 0;
            mid.GreenLights = new System.Collections.Generic.List<OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0254.GreenLightCommand>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0254 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0254();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0255</para></remarks>
    public class TestMID_0255 {
        public void runTests() {
            testRevision1();
        }
        // adding unknown type: (inner class)System.Collections.Generic.List`1[[OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0255+RedLightCommand, OpenProtocolInterpreter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]!
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0255 mid) {
            mid.DeviceID = 0;
            mid.RedLights = new System.Collections.Generic.List<OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0255.RedLightCommand>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0255 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationSelector.MID_0255();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0260</para></remarks>
    public class TestMID_0260 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0260 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0260 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0260();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0261</para></remarks>
    public class TestMID_0261 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0261 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0261 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0261();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0262</para></remarks>
    public class TestMID_0262 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0262 mid) {
            mid.ToolTagID = "STRING";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0262 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0262();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0263</para></remarks>
    public class TestMID_0263 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0263 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0263 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0263();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0264</para></remarks>
    public class TestMID_0264 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0264 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0264 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0264();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0265</para></remarks>
    public class TestMID_0265 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0265 mid) {
            mid.ToolTagID = "STRING";
            mid.Status = OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0265.Statuses.OPERABLE;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0265 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationToolLocationSystem.MID_0265();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ApplicationController.MID_0270</para></remarks>
    public class TestMID_0270 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ApplicationController.MID_0270 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ApplicationController.MID_0270 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ApplicationController.MID_0270();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Statistic.MID_0300</para></remarks>
    public class TestMID_0300 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Statistic.MID_0300 mid) {
            mid.ParameterSetID = 0;
            mid.HistogramType = OpenProtocolInterpreter.MIDs.Statistic.MID_0300.HistogramTypes.TORQUE;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Statistic.MID_0300 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Statistic.MID_0300();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.Statistic.MID_0301</para></remarks>
    public class TestMID_0301 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.Statistic.MID_0301 mid) {
            mid.ParameterSetID = 0;
            mid.HistogramType = OpenProtocolInterpreter.MIDs.Statistic.MID_0301.HistogramTypes.TORQUE;
            mid.SigmaHistogram = 0m;
            mid.MeanValueHistogram = 0m;
            mid.ClassRange = 0m;
            mid.Bar1 = 0;
            mid.Bar2 = 0;
            mid.Bar3 = 0;
            mid.Bar4 = 0;
            mid.Bar5 = 0;
            mid.Bar6 = 0;
            mid.Bar7 = 0;
            mid.Bar8 = 0;
            mid.Bar9 = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.Statistic.MID_0301 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.Statistic.MID_0301();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0400</para></remarks>
    public class TestMID_0400 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0400 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0400 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0400();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0401</para></remarks>
    public class TestMID_0401 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0401 mid) {
            mid.ManualAutomaticMode = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0401 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0401();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0401(false);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0402</para></remarks>
    public class TestMID_0402 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0402 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0402 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0402();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0403</para></remarks>
    public class TestMID_0403 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0403 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0403 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0403();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0410</para></remarks>
    public class TestMID_0410 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0410 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0410 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0410();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0411</para></remarks>
    public class TestMID_0411 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0411 mid) {
            mid.AutoDisableSetting = 0;
            mid.CurrentBatch = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0411 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.AutomaticManualMode.MID_0411();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0420</para></remarks>
    public class TestMID_0420 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0420 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0420 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0420();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0421</para></remarks>
    public class TestMID_0421 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0421 mid) {
            mid.DigitalInputStatus = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0421 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0421();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0422</para></remarks>
    public class TestMID_0422 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0422 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0422 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0422();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0423</para></remarks>
    public class TestMID_0423 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0423 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0423 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.OpenProtocolCommandsDisabled.MID_0423();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MotorTuning.MID_0500</para></remarks>
    public class TestMID_0500 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MotorTuning.MID_0500 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MotorTuning.MID_0500 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MotorTuning.MID_0500();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MotorTuning.MID_0501</para></remarks>
    public class TestMID_0501 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MotorTuning.MID_0501 mid) {
            mid.MotorTuneResult = false;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MotorTuning.MID_0501 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MotorTuning.MID_0501();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MotorTuning.MID_0501(false);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MotorTuning.MID_0502</para></remarks>
    public class TestMID_0502 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MotorTuning.MID_0502 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MotorTuning.MID_0502 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MotorTuning.MID_0502();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MotorTuning.MID_0503</para></remarks>
    public class TestMID_0503 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MotorTuning.MID_0503 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MotorTuning.MID_0503 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MotorTuning.MID_0503();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.MotorTuning.MID_0504</para></remarks>
    public class TestMID_0504 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.MotorTuning.MID_0504 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.MotorTuning.MID_0504 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.MotorTuning.MID_0504();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.ParameterSet.MID_2504</para></remarks>
    public class TestMID_2504 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.ParameterSet.MID_2504 mid) {
            mid.ParameterSetID = 0;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.ParameterSet.MID_2504 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_2504();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.ParameterSet.MID_2504(0);
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MIDs.KeepAlive.MID_9999</para></remarks>
    public class TestMID_9999 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MIDs.KeepAlive.MID_9999 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MIDs.KeepAlive.MID_9999 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MIDs.KeepAlive.MID_9999();
            try {
                this.setAllProperties(mid);
                package = mid.buildPackage();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine((mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (mb.ReflectedType.Name 
                                + (System.Environment.NewLine + ex.StackTrace))))));
            } finally {
                // finally
            }

        }
    }
}
