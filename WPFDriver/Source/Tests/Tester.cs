//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tests {
    using System.Diagnostics;
    
    public class Tester {
        public void runTests() {
            new TestMid0001().runTests();
            new TestMid0002().runTests();
            new TestMid0003().runTests();
            new TestMid0004().runTests();
            new TestMid0005().runTests();
            new TestMid0006().runTests();
            new TestMid0008().runTests();
            new TestMid0010().runTests();
            new TestMid0011().runTests();
            new TestMid0012().runTests();
            new TestMid0013().runTests();
            new TestMid0014().runTests();
            new TestMid0015().runTests();
            new TestMid0016().runTests();
            new TestMid0017().runTests();
            new TestMid0018().runTests();
            new TestMid0019().runTests();
            new TestMid0020().runTests();
            new TestMid0021().runTests();
            new TestMid0022().runTests();
            new TestMid0023().runTests();
            new TestMid0024().runTests();
            new TestMid0030().runTests();
            new TestMid0031().runTests();
            new TestMid0032().runTests();
            new TestMid0033().runTests();
            new TestMid0034().runTests();
            new TestMid0035().runTests();
            new TestMid0036().runTests();
            new TestMid0037().runTests();
            new TestMid0038().runTests();
            new TestMid0039().runTests();
            new TestMid0040().runTests();
            new TestMid0041().runTests();
            new TestMid0042().runTests();
            new TestMid0043().runTests();
            new TestMid0044().runTests();
            new TestMid0045().runTests();
            new TestMid0046().runTests();
            new TestMid0047().runTests();
            new TestMid0048().runTests();
            new TestMid0050().runTests();
            new TestMid0051().runTests();
            new TestMid0052().runTests();
            new TestMid0053().runTests();
            new TestMid0054().runTests();
            new TestMid0060().runTests();
            new TestMid0061().runTests();
            new TestMid0062().runTests();
            new TestMid0063().runTests();
            new TestMid0064().runTests();
            new TestMid0065().runTests();
            new TestMid0070().runTests();
            new TestMid0071().runTests();
            new TestMid0072().runTests();
            new TestMid0073().runTests();
            new TestMid0074().runTests();
            new TestMid0075().runTests();
            new TestMid0076().runTests();
            new TestMid0077().runTests();
            new TestMid0078().runTests();
            new TestMid0080().runTests();
            new TestMid0081().runTests();
            new TestMid0082().runTests();
            new TestMid0090().runTests();
            new TestMid0091().runTests();
            new TestMid0092().runTests();
            new TestMid0093().runTests();
            new TestMid0105().runTests();
            new TestMid0106().runTests();
            new TestMid0107().runTests();
            new TestMid0108().runTests();
            new TestMid0109().runTests();
            new TestMid0110().runTests();
            new TestMid0111().runTests();
            new TestMid0113().runTests();
            new TestMid0120().runTests();
            new TestMid0121().runTests();
            new TestMid0122().runTests();
            new TestMid0123().runTests();
            new TestMid0124().runTests();
            new TestMid0125().runTests();
            new TestMid0126().runTests();
            new TestMid0127().runTests();
            new TestMid0128().runTests();
            new TestMid0129().runTests();
            new TestMid0130().runTests();
            new TestMid0131().runTests();
            new TestMid0132().runTests();
            new TestMid0133().runTests();
            new TestMid0140().runTests();
            new TestMid0150().runTests();
            new TestMid0151().runTests();
            new TestMid0152().runTests();
            new TestMid0153().runTests();
            new TestMid0154().runTests();
            new TestMid0155().runTests();
            new TestMid0156().runTests();
            new TestMid0157().runTests();
            new TestMid0200().runTests();
            new TestMid0210().runTests();
            new TestMid0211().runTests();
            new TestMid0212().runTests();
            new TestMid0213().runTests();
            new TestMid0214().runTests();
            new TestMid0215().runTests();
            new TestMid0216().runTests();
            new TestMid0217().runTests();
            new TestMid0218().runTests();
            new TestMid0219().runTests();
            new TestMid0220().runTests();
            new TestMid0221().runTests();
            new TestMid0222().runTests();
            new TestMid0223().runTests();
            new TestMid0224().runTests();
            new TestMid0225().runTests();
            new TestMid0240().runTests();
            new TestMid0241().runTests();
            new TestMid0242().runTests();
            new TestMid0243().runTests();
            new TestMid0244().runTests();
            new TestMid0245().runTests();
            new TestMid0250().runTests();
            new TestMid0251().runTests();
            new TestMid0252().runTests();
            new TestMid0253().runTests();
            new TestMid0254().runTests();
            new TestMid0255().runTests();
            new TestMid0260().runTests();
            new TestMid0261().runTests();
            new TestMid0262().runTests();
            new TestMid0263().runTests();
            new TestMid0264().runTests();
            new TestMid0265().runTests();
            new TestMid0270().runTests();
            new TestMid0300().runTests();
            new TestMid0301().runTests();
            new TestMid0400().runTests();
            new TestMid0401().runTests();
            new TestMid0402().runTests();
            new TestMid0403().runTests();
            new TestMid0410().runTests();
            new TestMid0411().runTests();
            new TestMid0420().runTests();
            new TestMid0421().runTests();
            new TestMid0422().runTests();
            new TestMid0423().runTests();
            new TestMid0500().runTests();
            new TestMid0501().runTests();
            new TestMid0502().runTests();
            new TestMid0503().runTests();
            new TestMid0504().runTests();
            new TestMid1201().runTests();
            new TestMid1202().runTests();
            new TestMid1203().runTests();
            new TestMid2504().runTests();
            new TestMid9999().runTests();
        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Communication.Mid0001</para></remarks>
    public class TestMid0001 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
        }
        public void setAllProperties(OpenProtocolInterpreter.Communication.Mid0001 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0001 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0001(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0001 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Communication.Mid0001(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0001 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Communication.Mid0001(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0001 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Communication.Mid0001(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0001 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Communication.Mid0001(5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Communication.Mid0002</para></remarks>
    public class TestMid0002 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
            testRevision6();
        }
        public void setAllProperties(OpenProtocolInterpreter.Communication.Mid0002 mid) {
            mid.CellId = -1;
            mid.ChannelId = -1;
            mid.ControllerName = "TESTTESTTEST";
            mid.SupplierCode = "TESTTESTTEST";
            mid.OpenProtocolVersion = "TESTTESTTEST";
            mid.ControllerSoftwareVersion = "TESTTESTTEST";
            mid.ToolSoftwareVersion = "TESTTESTTEST";
            mid.RBUType = "TESTTESTTEST";
            mid.ControllerSerialNumber = "TESTTESTTEST";
            mid.SystemType = OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET;
            mid.SystemSubType = OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS;
            mid.SequenceNumberSupport = true;
            mid.LinkingHandlingSupport = true;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0002 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, false, false, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0002 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, false, false, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0002 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, false, false, 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0002 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, false, false, 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0002 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, false, false, 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision6() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Communication.Mid0002 mid;
            string package;

            // Revision 6.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 6.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", 6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 6.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", 6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 6.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", 6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 6.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", 6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 6.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, 6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 6.
            mid = new OpenProtocolInterpreter.Communication.Mid0002(0, 0, "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", OpenProtocolInterpreter.SystemType.SYSTEM_TYPE_NOT_SET, OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS, false, false, 6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Communication.Mid0003</para></remarks>
    public class TestMid0003 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Communication.Mid0003 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Communication.Mid0003 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Communication.Mid0004</para></remarks>
    public class TestMid0004 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Communication.Mid0004 mid) {
            mid.FailedMid = -1;
            mid.ErrorCode = OpenProtocolInterpreter.Error.NO_ERROR;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Communication.Mid0004 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0004(0, OpenProtocolInterpreter.Error.NO_ERROR);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Communication.Mid0005</para></remarks>
    public class TestMid0005 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Communication.Mid0005 mid) {
            mid.MidAccepted = -1;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Communication.Mid0005 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0005(0);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Communication.Mid0006</para></remarks>
    public class TestMid0006 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Communication.Mid0006 mid) {
            mid.RequestedMid = "TESTTESTTEST";
            mid.WantedRevision = -1;
            mid.ExtraDataLength = -1;
            mid.ExtraData = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.Communication.Mid0006 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0006("STRING", 0, "STRING");
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Communication.Mid0008</para></remarks>
    public class TestMid0008 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Communication.Mid0008 mid) {
            mid.SubscriptionMid = "TESTTESTTEST";
            mid.WantedRevision = -1;
            mid.ExtraDataLength = -1;
            mid.ExtraData = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.Communication.Mid0008 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Communication.Mid0008("STRING", 0, "STRING");
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0010</para></remarks>
    public class TestMid0010 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0010 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0010 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0010(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0010 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0010(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0010 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0010(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0011</para></remarks>
    public class TestMid0011 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[SYSTEM.INT32, MSCORLIB, VERSION=4.0.0.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=B77A5C561934E089]]
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0011 mid) {
/*
            mid.TotalParameterSets = -1;
*/
            mid.ParameterSets = new System.Collections.Generic.List<int>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0011 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0011(new int[1]);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0012</para></remarks>
    public class TestMid0012 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0012 mid) {
            mid.ParameterSetId = -1;
            mid.ParameterSetFileVersion = -1;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0012 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(0, 0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0012 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(0, 0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0012 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(0, 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(0, 0, 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0012 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(0, 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0012(0, 0, 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0013</para></remarks>
    public class TestMid0013 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0013 mid) {
            mid.ParameterSetId = -1;
            mid.ParameterSetName = "TESTTESTTEST";
            mid.RotationDirection = OpenProtocolInterpreter.RotationDirection.CLOCKWISE;
            mid.BatchSize = -1;
            mid.MinTorque = -1m;
            mid.MaxTorque = -1m;
            mid.TorqueFinalTarget = -1m;
            mid.MinAngle = -1;
            mid.MaxAngle = -1;
            mid.AngleFinalTarget = -1;
            mid.FirstTarget = -1m;
            mid.StartFinalAngle = -1m;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0013 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0013(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0013(0, "STRING", OpenProtocolInterpreter.RotationDirection.CLOCKWISE, 0, 0m, 0m, 0m, 0, 0, 0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0013(0, "STRING", OpenProtocolInterpreter.RotationDirection.CLOCKWISE, 0, 0m, 0m, 0m, 0, 0, 0, 0m, 0m, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0013 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0013(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0013(0, "STRING", OpenProtocolInterpreter.RotationDirection.CLOCKWISE, 0, 0m, 0m, 0m, 0, 0, 0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0013(0, "STRING", OpenProtocolInterpreter.RotationDirection.CLOCKWISE, 0, 0m, 0m, 0m, 0, 0, 0, 0m, 0m, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0014</para></remarks>
    public class TestMid0014 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0014 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0014 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0014(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0015</para></remarks>
    public class TestMid0015 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0015 mid) {
            mid.ParameterSetId = -1;
            mid.LastChangeInParameterSet = System.DateTime.MinValue;
            mid.ParameterSetName = "TESTTESTTEST";
            mid.RotationDirection = OpenProtocolInterpreter.RotationDirection.CLOCKWISE;
            mid.BatchSize = -1;
            mid.MinTorque = -1m;
            mid.MaxTorque = -1m;
            mid.TorqueFinalTarget = -1m;
            mid.MinAngle = -1;
            mid.MaxAngle = -1;
            mid.AngleFinalTarget = -1;
            mid.FirstTarget = -1m;
            mid.StartFinalAngle = -1m;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0015 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0015(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0015(0, System.DateTime.Now, null, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0015(0, "STRING", System.DateTime.Now, OpenProtocolInterpreter.RotationDirection.CLOCKWISE, 0, 0m, 0m, 0m, 0, 0, 0, 0m, 0m, null, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.ParameterSet.Mid0015 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0015(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0015(0, System.DateTime.Now, null, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0015(0, "STRING", System.DateTime.Now, OpenProtocolInterpreter.RotationDirection.CLOCKWISE, 0, 0m, 0m, 0m, 0, 0, 0, 0m, 0m, null, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0016</para></remarks>
    public class TestMid0016 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0016 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0016 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0017</para></remarks>
    public class TestMid0017 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0017 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0017 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0018</para></remarks>
    public class TestMid0018 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0018 mid) {
            mid.ParameterSetId = -1;
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0018 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0018(0);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0019</para></remarks>
    public class TestMid0019 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0019 mid) {
            mid.ParameterSetId = -1;
            mid.BatchSize = -1;
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0019 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0019(0, 0);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0020</para></remarks>
    public class TestMid0020 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0020 mid) {
            mid.ParameterSetId = -1;
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0020 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0020(0);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0021</para></remarks>
    public class TestMid0021 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0021 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0021 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0021(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0022</para></remarks>
    public class TestMid0022 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0022 mid) {
            mid.RelayStatus = true;
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0022 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0022(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid0022(false, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0023</para></remarks>
    public class TestMid0023 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0023 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0023 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid0024</para></remarks>
    public class TestMid0024 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid0024 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid0024 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0030</para></remarks>
    public class TestMid0030 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0030 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0030 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0030(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0030 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0030(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0031</para></remarks>
    public class TestMid0031 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[SYSTEM.INT32, MSCORLIB, VERSION=4.0.0.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=B77A5C561934E089]]
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0031 mid) {
/*
            mid.TotalJobs = -1;
*/
            mid.JobIds = new System.Collections.Generic.List<int>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Mid0031 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0031(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0031(0, new int[1], 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0032</para></remarks>
    public class TestMid0032 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0032 mid) {
            mid.JobId = -1;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0032 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0032(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0032(0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0032 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0032(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0032(0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0032 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0032(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0032(0, 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0033</para></remarks>
    public class TestMid0033 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.JOB.PARAMETERSET, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0033 mid) {
            mid.JobId = -1;
            mid.JobName = "TESTTESTTEST";
            mid.ForcedOrder = OpenProtocolInterpreter.ForcedOrder.FREE_ORDER;
            mid.MaxTimeForFirstTightening = -1;
            mid.MaxTimeToCompleteJob = -1;
            mid.JobBatchMode = OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS;
            mid.LockAtJobDone = true;
            mid.UseLineControl = true;
            mid.RepeatJob = true;
            mid.ToolLoosening = OpenProtocolInterpreter.ToolLoosening.ENABLED;
            mid.Reserved = OpenProtocolInterpreter.Reserved.E;
            mid.NumberOfParameterSets = -1;
            mid.ParameterSetList = new System.Collections.Generic.List<OpenProtocolInterpreter.Job.ParameterSet>();
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0033 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0033(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0033(0, "STRING", OpenProtocolInterpreter.ForcedOrder.FREE_ORDER, 0, 0, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, false, false, false, OpenProtocolInterpreter.ToolLoosening.ENABLED, OpenProtocolInterpreter.Reserved.E, 0, new OpenProtocolInterpreter.Job.ParameterSet[1], 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0033 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0033(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0033(0, "STRING", OpenProtocolInterpreter.ForcedOrder.FREE_ORDER, 0, 0, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, false, false, false, OpenProtocolInterpreter.ToolLoosening.ENABLED, OpenProtocolInterpreter.Reserved.E, 0, new OpenProtocolInterpreter.Job.ParameterSet[1], 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0033 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0033(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0033(0, "STRING", OpenProtocolInterpreter.ForcedOrder.FREE_ORDER, 0, 0, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, false, false, false, OpenProtocolInterpreter.ToolLoosening.ENABLED, OpenProtocolInterpreter.Reserved.E, 0, new OpenProtocolInterpreter.Job.ParameterSet[1], 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0034</para></remarks>
    public class TestMid0034 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0034 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0034 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0034(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0034 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0034(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0034 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0034(3, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0034 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Job.Mid0034(4, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0035</para></remarks>
    public class TestMid0035 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0035 mid) {
            mid.JobId = -1;
            mid.JobStatus = OpenProtocolInterpreter.JobStatus.NOT_COMPLETED;
            mid.JobBatchMode = OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS;
            mid.JobBatchSize = -1;
            mid.JobBatchCounter = -1;
            mid.TimeStamp = System.DateTime.MinValue;
            mid.JobCurrentStep = -1;
            mid.JobTotalNumberOfSteps = -1;
            mid.JobStepType = -1;
            mid.JobTighteningStatus = OpenProtocolInterpreter.JobTighteningStatus.OFF;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0035 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0035(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, 1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, 0, 0, 0, 1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, OpenProtocolInterpreter.JobTighteningStatus.OFF, 1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0035 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0035(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, 2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, 0, 0, 0, 2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, OpenProtocolInterpreter.JobTighteningStatus.OFF, 2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0035 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0035(3, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, 3, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, 0, 0, 0, 3, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, OpenProtocolInterpreter.JobTighteningStatus.OFF, 3, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0035 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Job.Mid0035(4, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, 4, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, 0, 0, 0, 4, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Job.Mid0035(0, OpenProtocolInterpreter.JobStatus.NOT_COMPLETED, OpenProtocolInterpreter.JobBatchMode.ONLY_OK_TIGHTENINGS, 0, 0, System.DateTime.Now, OpenProtocolInterpreter.JobTighteningStatus.OFF, 4, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0036</para></remarks>
    public class TestMid0036 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0036 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0036 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0036(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0036 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0036(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0036 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0036(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0036 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Job.Mid0036(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0037</para></remarks>
    public class TestMid0037 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0037 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0037 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0037(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0037 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0037(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0037 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Job.Mid0037(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0037 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Job.Mid0037(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0038</para></remarks>
    public class TestMid0038 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0038 mid) {
            mid.JobId = -1;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0038 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0038(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0038(0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0038 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0038(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0038(0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Mid0039</para></remarks>
    public class TestMid0039 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Mid0039 mid) {
            mid.JobId = -1;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0039 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0039(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Mid0039(0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Mid0039 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0039(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Mid0039(0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0040</para></remarks>
    public class TestMid0040 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0040 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0040 mid;
            string package;

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0040 mid;
            string package;

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0040 mid;
            string package;

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0040 mid;
            string package;

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0040 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0041</para></remarks>
    public class TestMid0041 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
        }
        // unhandled: OPENPROTOCOLINTERPRETER.TOOL.MID0041+OPENENDDATAS
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0041 mid) {
            mid.ToolSerialNumber = "TESTTESTTEST";
            mid.ToolNumberOfTightenings = -1;
            mid.LastCalibrationDate = System.DateTime.MinValue;
            mid.ControllerSerialNumber = "TESTTESTTEST";
            mid.CalibrationValue = -1m;
            mid.LastServiceDate = System.DateTime.MinValue;
            mid.TighteningsSinceService = -1;
            mid.ToolType = OpenProtocolInterpreter.ToolType.NO_TOOL;
            mid.MotorSize = -1;
            mid.OpenEndData = new OpenProtocolInterpreter.Tool.Mid0041.OpenEndDatas();
            mid.ControllerSoftwareVersion = "TESTTESTTEST";
            mid.ToolMaxTorque = -1m;
            mid.GearRatio = -1m;
            mid.ToolFullSpeed = -1m;
            mid.PrimaryTool = OpenProtocolInterpreter.PrimaryTool.CABLE;
            mid.ToolModel = "TESTTESTTEST";
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0041 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0041(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, "STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0041 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tool.Mid0041(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, "STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0041 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tool.Mid0041(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, "STRING", 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0041 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tool.Mid0041(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, "STRING", 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tool.Mid0041 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tool.Mid0041(5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tool.Mid0041("STRING", 0, System.DateTime.Now, "STRING", 0m, System.DateTime.Now, 0, OpenProtocolInterpreter.ToolType.NO_TOOL, 0, null, "STRING", 0m, 0m, 0m, OpenProtocolInterpreter.PrimaryTool.CABLE, "STRING", 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0042</para></remarks>
    public class TestMid0042 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0042 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Tool.Mid0042 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0043</para></remarks>
    public class TestMid0043 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0043 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Tool.Mid0043 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0044</para></remarks>
    public class TestMid0044 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0044 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Tool.Mid0044 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0045</para></remarks>
    public class TestMid0045 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0045 mid) {
            mid.CalibrationValueUnit = OpenProtocolInterpreter.CalibrationUnit.NM;
            mid.CalibrationValue = -1m;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Tool.Mid0045 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0045(OpenProtocolInterpreter.CalibrationUnit.NM, 0m);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0046</para></remarks>
    public class TestMid0046 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0046 mid) {
            mid.PrimaryTool = OpenProtocolInterpreter.PrimaryTool.CABLE;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Tool.Mid0046 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0046(OpenProtocolInterpreter.PrimaryTool.CABLE);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0047</para></remarks>
    public class TestMid0047 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0047 mid) {
            mid.PairingHandlingType = OpenProtocolInterpreter.PairingHandlingType.START_PAIRING;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Tool.Mid0047 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tool.Mid0048</para></remarks>
    public class TestMid0048 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tool.Mid0048 mid) {
            mid.PairingStatus = OpenProtocolInterpreter.PairingStatus.UNDEFINED;
            mid.TimeStamp = System.DateTime.MinValue;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Tool.Mid0048 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tool.Mid0048(OpenProtocolInterpreter.PairingStatus.UNDEFINED, System.DateTime.Now);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Vin.Mid0050</para></remarks>
    public class TestMid0050 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Vin.Mid0050 mid) {
            mid.VinNumber = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.Vin.Mid0050 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Vin.Mid0050("STRING");
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Vin.Mid0051</para></remarks>
    public class TestMid0051 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Vin.Mid0051 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Vin.Mid0051 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Vin.Mid0051(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Vin.Mid0051 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Vin.Mid0051(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Vin.Mid0052</para></remarks>
    public class TestMid0052 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Vin.Mid0052 mid) {
            mid.VinNumber = "TESTTESTTEST";
            mid.IdentifierResultPart2 = "TESTTESTTEST";
            mid.IdentifierResultPart3 = "TESTTESTTEST";
            mid.IdentifierResultPart4 = "TESTTESTTEST";
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Vin.Mid0052 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Vin.Mid0052(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Vin.Mid0052("STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Vin.Mid0052("STRING", "STRING", "STRING", "STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Vin.Mid0052 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Vin.Mid0052(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Vin.Mid0052("STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Vin.Mid0052("STRING", "STRING", "STRING", "STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Vin.Mid0053</para></remarks>
    public class TestMid0053 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Vin.Mid0053 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Vin.Mid0053 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Vin.Mid0053(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Vin.Mid0053 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Vin.Mid0053(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Vin.Mid0054</para></remarks>
    public class TestMid0054 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Vin.Mid0054 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Vin.Mid0054 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Vin.Mid0054(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tightening.Mid0060</para></remarks>
    public class TestMid0060 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
            testRevision6();
            testRevision7();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tightening.Mid0060 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0060 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tightening.Mid0060(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0060 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tightening.Mid0060(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0060 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tightening.Mid0060(3, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0060 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tightening.Mid0060(4, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0060 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tightening.Mid0060(5, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision6() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0060 mid;
            string package;

            // Revision 6.
            mid = new OpenProtocolInterpreter.Tightening.Mid0060(6, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision7() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0060 mid;
            string package;

            // Revision 7.
            mid = new OpenProtocolInterpreter.Tightening.Mid0060(7, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tightening.Mid0061</para></remarks>
    public class TestMid0061 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
            testRevision6();
            testRevision7();
        }
        // unhandled: OPENPROTOCOLINTERPRETER.TIGHTENING.STRATEGYOPTIONS
        // unhandled: OPENPROTOCOLINTERPRETER.TIGHTENING.TIGHTENINGERRORSTATUS
        // unhandled: OPENPROTOCOLINTERPRETER.TIGHTENING.TIGHTENINGERRORSTATUS2
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.TIGHTENING.STAGERESULT, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.Tightening.Mid0061 mid) {
            mid.CellId = -1;
            mid.ChannelId = -1;
            mid.TorqueControllerName = "TESTTESTTEST";
            mid.VinNumber = "TESTTESTTEST";
            mid.JobId = -1;
            mid.ParameterSetId = -1;
            mid.BatchSize = -1;
            mid.BatchCounter = -1;
            mid.TighteningStatus = true;
            mid.TorqueStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.AngleStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.TorqueMinLimit = -1m;
            mid.TorqueMaxLimit = -1m;
            mid.TorqueFinalTarget = -1m;
            mid.Torque = -1m;
            mid.AngleMinLimit = -1;
            mid.AngleMaxLimit = -1;
            mid.AngleFinalTarget = -1;
            mid.Angle = -1;
            mid.Timestamp = System.DateTime.MinValue;
            mid.LastChangeInParameterSet = System.DateTime.MinValue;
            mid.BatchStatus = OpenProtocolInterpreter.BatchStatus.NOK;
            mid.TighteningId = -1;
            mid.Strategy = OpenProtocolInterpreter.Strategy.TORQUE_CONTROL;
            mid.StrategyOptions = new OpenProtocolInterpreter.Tightening.StrategyOptions();
            mid.RundownAngleStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.CurrentMonitoringStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.SelftapStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.PrevailTorqueMonitoringStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.PrevailTorqueCompensateStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.TighteningErrorStatus = new OpenProtocolInterpreter.Tightening.TighteningErrorStatus();
            mid.RundownAngleMin = -1;
            mid.RundownAngleMax = -1;
            mid.RundownAngle = -1;
            mid.CurrentMonitoringMin = -1;
            mid.CurrentMonitoringMax = -1;
            mid.CurrentMonitoringValue = -1;
            mid.SelftapMin = -1m;
            mid.SelftapMax = -1m;
            mid.SelftapTorque = -1m;
            mid.PrevailTorqueMonitoringMin = -1m;
            mid.PrevailTorqueMonitoringMax = -1m;
            mid.PrevailTorque = -1m;
            mid.JobSequenceNumber = -1;
            mid.SyncTighteningId = -1;
            mid.ToolSerialNumber = "TESTTESTTEST";
            mid.ParameterSetName = "TESTTESTTEST";
            mid.TorqueValuesUnit = OpenProtocolInterpreter.TorqueValuesUnit.NM;
            mid.ResultType = OpenProtocolInterpreter.ResultType.TIGHTENING;
            mid.IdentifierResultPart2 = "TESTTESTTEST";
            mid.IdentifierResultPart3 = "TESTTESTTEST";
            mid.IdentifierResultPart4 = "TESTTESTTEST";
            mid.CustomerTighteningErrorCode = "TESTTESTTEST";
            mid.PrevailTorqueCompensateValue = -1m;
            mid.TighteningErrorStatus2 = new OpenProtocolInterpreter.Tightening.TighteningErrorStatus2();
            mid.CompensatedAngle = -1m;
            mid.FinalAngleDecimal = -1m;
            mid.NumberOfStagesInMultistage = -1;
            mid.NumberOfStageResults = -1;
            mid.StageResults = new System.Collections.Generic.List<OpenProtocolInterpreter.Tightening.StageResult>();
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0061 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tightening.Mid0061(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0061 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tightening.Mid0061(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0061 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tightening.Mid0061(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0061 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tightening.Mid0061(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0061 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tightening.Mid0061(5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision6() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0061 mid;
            string package;

            // Revision 6.
            mid = new OpenProtocolInterpreter.Tightening.Mid0061(6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision7() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0061 mid;
            string package;

            // Revision 7.
            mid = new OpenProtocolInterpreter.Tightening.Mid0061(7);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tightening.Mid0062</para></remarks>
    public class TestMid0062 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
            testRevision6();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tightening.Mid0062 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0062 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tightening.Mid0062(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0062 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tightening.Mid0062(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0062 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tightening.Mid0062(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0062 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tightening.Mid0062(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0062 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tightening.Mid0062(5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision6() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0062 mid;
            string package;

            // Revision 6.
            mid = new OpenProtocolInterpreter.Tightening.Mid0062(6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tightening.Mid0063</para></remarks>
    public class TestMid0063 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
            testRevision6();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tightening.Mid0063 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0063 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tightening.Mid0063(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0063 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tightening.Mid0063(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0063 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tightening.Mid0063(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0063 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tightening.Mid0063(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0063 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tightening.Mid0063(5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision6() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0063 mid;
            string package;

            // Revision 6.
            mid = new OpenProtocolInterpreter.Tightening.Mid0063(6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tightening.Mid0064</para></remarks>
    public class TestMid0064 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
            testRevision6();
        }
        public void setAllProperties(OpenProtocolInterpreter.Tightening.Mid0064 mid) {
            mid.TighteningId = -1;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0064 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0064 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0064 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(0, 3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0064 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(0, 4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0064 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(0, 5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision6() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0064 mid;
            string package;

            // Revision 6.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 6.
            mid = new OpenProtocolInterpreter.Tightening.Mid0064(0, 6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Tightening.Mid0065</para></remarks>
    public class TestMid0065 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
            testRevision5();
            testRevision6();
        }
        // unhandled: OPENPROTOCOLINTERPRETER.TIGHTENING.STRATEGYOPTIONS
        // unhandled: OPENPROTOCOLINTERPRETER.TIGHTENING.TIGHTENINGERRORSTATUS
        // unhandled: OPENPROTOCOLINTERPRETER.TIGHTENING.TIGHTENINGERRORSTATUS2
        public void setAllProperties(OpenProtocolInterpreter.Tightening.Mid0065 mid) {
            mid.TighteningId = -1;
            mid.VinNumber = "TESTTESTTEST";
            mid.ParameterSetId = -1;
            mid.BatchCounter = -1;
            mid.TighteningStatus = true;
            mid.TorqueStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.AngleStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.Torque = -1m;
            mid.Angle = -1;
            mid.Timestamp = System.DateTime.MinValue;
            mid.BatchStatus = OpenProtocolInterpreter.BatchStatus.NOK;
            mid.JobId = -1;
            mid.Strategy = OpenProtocolInterpreter.Strategy.TORQUE_CONTROL;
            mid.StrategyOptions = new OpenProtocolInterpreter.Tightening.StrategyOptions();
            mid.BatchSize = -1;
            mid.RundownAngleStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.CurrentMonitoringStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.SelftapStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.PrevailTorqueMonitoringStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.PrevailTorqueCompensateStatus = OpenProtocolInterpreter.TighteningValueStatus.LOW;
            mid.TighteningErrorStatus = new OpenProtocolInterpreter.Tightening.TighteningErrorStatus();
            mid.RundownAngle = -1;
            mid.CurrentMonitoringValue = -1;
            mid.SelftapTorque = -1m;
            mid.PrevailTorque = -1m;
            mid.JobSequenceNumber = -1;
            mid.SyncTighteningId = -1;
            mid.ToolSerialNumber = "TESTTESTTEST";
            mid.TorqueValuesUnit = OpenProtocolInterpreter.TorqueValuesUnit.NM;
            mid.ResultType = OpenProtocolInterpreter.ResultType.TIGHTENING;
            mid.IdentifierResultPart2 = "TESTTESTTEST";
            mid.IdentifierResultPart3 = "TESTTESTTEST";
            mid.IdentifierResultPart4 = "TESTTESTTEST";
            mid.CustomerTighteningErrorCode = "TESTTESTTEST";
            mid.PrevailTorqueCompensateValue = -1m;
            mid.TighteningErrorStatus2 = new OpenProtocolInterpreter.Tightening.TighteningErrorStatus2();
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0065 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Tightening.Mid0065(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0065 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Tightening.Mid0065(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0065 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.Tightening.Mid0065(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0065 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.Tightening.Mid0065(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision5() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0065 mid;
            string package;

            // Revision 5.
            mid = new OpenProtocolInterpreter.Tightening.Mid0065(5);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision6() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Tightening.Mid0065 mid;
            string package;

            // Revision 6.
            mid = new OpenProtocolInterpreter.Tightening.Mid0065(6);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0070</para></remarks>
    public class TestMid0070 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0070 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0070 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0070(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0070 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0070(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0071</para></remarks>
    public class TestMid0071 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0071 mid) {
            mid.ErrorCode = "TESTTESTTEST";
            mid.ControllerReadyStatus = true;
            mid.ToolReadyStatus = true;
            mid.Time = System.DateTime.MinValue;
            mid.AlarmText = "TESTTESTTEST";
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0071 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0071(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0071("STRING", false, false, System.DateTime.Now, 1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0071("STRING", false, false, System.DateTime.Now, "STRING", 1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0071 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0071(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0071("STRING", false, false, System.DateTime.Now, 2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0071("STRING", false, false, System.DateTime.Now, "STRING", 2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0072</para></remarks>
    public class TestMid0072 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0072 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0072 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0072(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0072 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0072(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0073</para></remarks>
    public class TestMid0073 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0073 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0073 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0073(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0073 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0073(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0074</para></remarks>
    public class TestMid0074 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0074 mid) {
            mid.ErrorCode = "TESTTESTTEST";
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0074 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0074(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0074("STRING", 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0074 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0074(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0074("STRING", 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0075</para></remarks>
    public class TestMid0075 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0075 mid) {
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0075 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0075(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Alarm.Mid0075 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Alarm.Mid0075(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0076</para></remarks>
    public class TestMid0076 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0076 mid) {
            mid.AlarmStatus = true;
            mid.ErrorCode = "TESTTESTTEST";
            mid.ControllerReadyStatus = true;
            mid.ToolReadyStatus = true;
            mid.Time = System.DateTime.MinValue;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Alarm.Mid0076 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Alarm.Mid0076(false, "STRING", false, false, System.DateTime.Now);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0077</para></remarks>
    public class TestMid0077 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0077 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Alarm.Mid0077 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Alarm.Mid0078</para></remarks>
    public class TestMid0078 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Alarm.Mid0078 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Alarm.Mid0078 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Time.Mid0080</para></remarks>
    public class TestMid0080 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Time.Mid0080 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Time.Mid0080 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Time.Mid0081</para></remarks>
    public class TestMid0081 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Time.Mid0081 mid) {
            mid.Time = System.DateTime.MinValue;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Time.Mid0081 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Time.Mid0081(System.DateTime.Now);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Time.Mid0082</para></remarks>
    public class TestMid0082 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Time.Mid0082 mid) {
            mid.Time = System.DateTime.MinValue;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Time.Mid0082 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Time.Mid0082(System.DateTime.Now);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultiSpindle.Mid0090</para></remarks>
    public class TestMid0090 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultiSpindle.Mid0090 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultiSpindle.Mid0090 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MultiSpindle.Mid0090(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultiSpindle.Mid0091</para></remarks>
    public class TestMid0091 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.MULTISPINDLE.SPINDLESTATUS, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.MultiSpindle.Mid0091 mid) {
            mid.NumberOfSpindles = -1;
            mid.SyncTighteningId = -1;
            mid.Time = System.DateTime.MinValue;
            mid.SyncOverallStatus = true;
            mid.SpindlesStatus = new System.Collections.Generic.List<OpenProtocolInterpreter.MultiSpindle.SpindleStatus>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultiSpindle.Mid0091 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MultiSpindle.Mid0091(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MultiSpindle.Mid0091(0, 0, System.DateTime.Now, false, new OpenProtocolInterpreter.MultiSpindle.SpindleStatus[1], null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultiSpindle.Mid0092</para></remarks>
    public class TestMid0092 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultiSpindle.Mid0092 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultiSpindle.Mid0092 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultiSpindle.Mid0093</para></remarks>
    public class TestMid0093 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultiSpindle.Mid0093 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultiSpindle.Mid0093 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PowerMACS.Mid0105</para></remarks>
    public class TestMid0105 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        public void setAllProperties(OpenProtocolInterpreter.PowerMACS.Mid0105 mid) {
            mid.DataNumberSystem = -1;
            mid.SendOnlyNewData = true;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0105 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0105(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0105 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0105(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0105 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0105(3, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0105 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0105(4, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PowerMACS.Mid0106</para></remarks>
    public class TestMid0106 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.POWERMACS.BOLTDATA, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.POWERMACS.SPECIALVALUE, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.PowerMACS.Mid0106 mid) {
            mid.TotalNumberOfMessages = -1;
            mid.MessageNumber = -1;
            mid.DataNumberSystem = -1;
            mid.StationNumber = -1;
            mid.StationName = "TESTTESTTEST";
            mid.Time = System.DateTime.MinValue;
            mid.ModeNumber = -1;
            mid.ModeName = "TESTTESTTEST";
            mid.SimpleStatus = true;
            mid.PMStatus = OpenProtocolInterpreter.PowerMacsStatus.OK;
            mid.WpId = "TESTTESTTEST";
/*
            mid.NumberOfBolts = -1;
*/
            mid.BoltsData = new System.Collections.Generic.List<OpenProtocolInterpreter.PowerMACS.BoltData>();
/*
            mid.TotalSpecialValues = -1;
*/
            mid.SpecialValues = new System.Collections.Generic.List<OpenProtocolInterpreter.PowerMACS.SpecialValue>();
            mid.SystemSubType = OpenProtocolInterpreter.SystemSubType.NO_SUBTYPE_EXISTS;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0106 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0106(1, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0106 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0106(2, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0106 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0106(3, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0106 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0106(4, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PowerMACS.Mid0107</para></remarks>
    public class TestMid0107 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.POWERMACS.BOLTRESULT, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.POWERMACS.STEPRESULT, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.POWERMACS.SPECIALVALUE, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.PowerMACS.Mid0107 mid) {
            mid.TotalNumberOfMessages = -1;
            mid.MessageNumber = -1;
            mid.DataNumberSystem = -1;
            mid.StationNumber = -1;
            mid.Time = System.DateTime.MinValue;
            mid.BoltNumber = -1;
            mid.BoltName = "TESTTESTTEST";
            mid.ProgramName = "TESTTESTTEST";
            mid.PowerMacsStatus = OpenProtocolInterpreter.PowerMACS.Mid0107.PowerMacsStatuses.OK;
            mid.Errors = "TESTTESTTEST";
            mid.CustomerErrorCode = "TESTTESTTEST";
/*
            mid.NumberOfBoltResults = -1;
*/
            mid.BoltResults = new System.Collections.Generic.List<OpenProtocolInterpreter.PowerMACS.BoltResult>();
/*
            mid.NumberOfStepResults = -1;
*/
            mid.AllStepDataSent = true;
            mid.StepResults = new System.Collections.Generic.List<OpenProtocolInterpreter.PowerMACS.StepResult>();
/*
            mid.NumberOfSpecialValues = -1;
*/
            mid.SpecialValues = new System.Collections.Generic.List<OpenProtocolInterpreter.PowerMACS.SpecialValue>();
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0107 mid;
            string package;

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0107 mid;
            string package;

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0107 mid;
            string package;

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0107 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PowerMACS.Mid0108</para></remarks>
    public class TestMid0108 {
        public void runTests() {
            testRevision1();
            testRevision2();
            testRevision3();
            testRevision4();
        }
        public void setAllProperties(OpenProtocolInterpreter.PowerMACS.Mid0108 mid) {
            mid.BoltData = true;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0108 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0108(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0108 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0108(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision3() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0108 mid;
            string package;

            // Revision 3.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0108(3);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision4() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.PowerMACS.Mid0108 mid;
            string package;

            // Revision 4.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0108(4);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PowerMACS.Mid0109</para></remarks>
    public class TestMid0109 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.PowerMACS.Mid0109 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.PowerMACS.Mid0109 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.PowerMACS.Mid0109(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.UserInterface.Mid0110</para></remarks>
    public class TestMid0110 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.UserInterface.Mid0110 mid) {
            mid.UserText = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.UserInterface.Mid0110 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.UserInterface.Mid0110("STRING");
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.UserInterface.Mid0111</para></remarks>
    public class TestMid0111 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.UserInterface.Mid0111 mid) {
            mid.TextDuration = -1;
            mid.RemovalCondition = OpenProtocolInterpreter.RemovalCondition.ACKNOWLEDGE_OR_WAIT_EXPIRATION_TIME;
            mid.Line1 = "TESTTESTTEST";
            mid.Line2 = "TESTTESTTEST";
            mid.Line3 = "TESTTESTTEST";
            mid.Line4 = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.UserInterface.Mid0111 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.UserInterface.Mid0111(0, OpenProtocolInterpreter.RemovalCondition.ACKNOWLEDGE_OR_WAIT_EXPIRATION_TIME, "STRING", "STRING", "STRING", "STRING");
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.UserInterface.Mid0113</para></remarks>
    public class TestMid0113 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.UserInterface.Mid0113 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.UserInterface.Mid0113 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0120</para></remarks>
    public class TestMid0120 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0120 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0120 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0120(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0121</para></remarks>
    public class TestMid0121 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0121 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0121 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0121(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0122</para></remarks>
    public class TestMid0122 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0122 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0122 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0122(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0123</para></remarks>
    public class TestMid0123 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0123 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0123 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0123(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0124</para></remarks>
    public class TestMid0124 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0124 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0124 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0124(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0125</para></remarks>
    public class TestMid0125 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0125 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0125 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0125(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0126</para></remarks>
    public class TestMid0126 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0126 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0126 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0127</para></remarks>
    public class TestMid0127 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0127 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0127 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0128</para></remarks>
    public class TestMid0128 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0128 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0128 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0129</para></remarks>
    public class TestMid0129 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0129 mid) {
            mid.ChannelId = -1;
            mid.ParameterSetId = -1;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Advanced.Mid0129 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0129(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0129(0, 0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.Job.Advanced.Mid0129 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0129(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0129(0, 0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0130</para></remarks>
    public class TestMid0130 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0130 mid) {
            mid.JobOffStatus = true;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0130 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0130(false);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0131</para></remarks>
    public class TestMid0131 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0131 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0131 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0132</para></remarks>
    public class TestMid0132 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0132 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0132 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0133</para></remarks>
    public class TestMid0133 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0133 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0133 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Job.Advanced.Mid0140</para></remarks>
    public class TestMid0140 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.JOB.ADVANCED.ADVANCEDJOB, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.Job.Advanced.Mid0140 mid) {
            mid.JobId = -1;
            mid.JobName = "TESTTESTTEST";
            mid.NumberOfParameterSets = -1;
            mid.JobList = new System.Collections.Generic.List<OpenProtocolInterpreter.Job.Advanced.AdvancedJob>();
            mid.ForcedOrder = OpenProtocolInterpreter.ForcedOrder.FREE_ORDER;
            mid.LockAtJobDone = true;
            mid.ToolLoosening = OpenProtocolInterpreter.ToolLoosening.ENABLED;
            mid.RepeatJob = true;
            mid.BatchMode = OpenProtocolInterpreter.BatchMode.ONLY_OK;
            mid.BatchStatusAtIncrement = true;
            mid.DecrementBatchAtOkLoosening = true;
            mid.MaxTimeForFirstTightening = -1;
            mid.MaxTimeToCompleteJob = -1;
            mid.DisplayResultAtAutoSelect = -1;
            mid.UsingLineControl = true;
            mid.IdentifierResultPart = OpenProtocolInterpreter.IdentifierPart.JOB_VIN_NUMBER;
            mid.ResultOfNonTightenings = true;
            mid.ResetAllIdentifiersAtJobDone = true;
            mid.Reserved = OpenProtocolInterpreter.Reserved.E;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Job.Advanced.Mid0140 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.Job.Advanced.Mid0140(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultipleIdentifiers.Mid0150</para></remarks>
    public class TestMid0150 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultipleIdentifiers.Mid0150 mid) {
            mid.IdentifierData = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultipleIdentifiers.Mid0150 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MultipleIdentifiers.Mid0150("STRING");
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultipleIdentifiers.Mid0151</para></remarks>
    public class TestMid0151 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultipleIdentifiers.Mid0151 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultipleIdentifiers.Mid0151 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MultipleIdentifiers.Mid0151(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultipleIdentifiers.Mid0152</para></remarks>
    public class TestMid0152 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: OPENPROTOCOLINTERPRETER.MULTIPLEIDENTIFIERS.IDENTIFIERSTATUS
        // unhandled: OPENPROTOCOLINTERPRETER.MULTIPLEIDENTIFIERS.IDENTIFIERSTATUS
        // unhandled: OPENPROTOCOLINTERPRETER.MULTIPLEIDENTIFIERS.IDENTIFIERSTATUS
        // unhandled: OPENPROTOCOLINTERPRETER.MULTIPLEIDENTIFIERS.IDENTIFIERSTATUS
        public void setAllProperties(OpenProtocolInterpreter.MultipleIdentifiers.Mid0152 mid) {
            mid.FirstIdentifierStatus = new OpenProtocolInterpreter.MultipleIdentifiers.IdentifierStatus();
            mid.SecondIdentifierStatus = new OpenProtocolInterpreter.MultipleIdentifiers.IdentifierStatus();
            mid.ThirdIdentifierStatus = new OpenProtocolInterpreter.MultipleIdentifiers.IdentifierStatus();
            mid.FourthIdentifierStatus = new OpenProtocolInterpreter.MultipleIdentifiers.IdentifierStatus();
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultipleIdentifiers.Mid0152 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultipleIdentifiers.Mid0153</para></remarks>
    public class TestMid0153 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultipleIdentifiers.Mid0153 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultipleIdentifiers.Mid0153 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultipleIdentifiers.Mid0154</para></remarks>
    public class TestMid0154 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultipleIdentifiers.Mid0154 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultipleIdentifiers.Mid0154 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultipleIdentifiers.Mid0155</para></remarks>
    public class TestMid0155 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultipleIdentifiers.Mid0155 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultipleIdentifiers.Mid0155 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultipleIdentifiers.Mid0156</para></remarks>
    public class TestMid0156 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultipleIdentifiers.Mid0156 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultipleIdentifiers.Mid0156 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MultipleIdentifiers.Mid0157</para></remarks>
    public class TestMid0157 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MultipleIdentifiers.Mid0157 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MultipleIdentifiers.Mid0157 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0200</para></remarks>
    public class TestMid0200 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0200 mid) {
            mid.StatusRelayOne = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelayTwo = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelayThree = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelayFour = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelayFive = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelaySix = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelaySeven = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelayEight = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelayNine = OpenProtocolInterpreter.RelayStatus.OFF;
            mid.StatusRelayTen = OpenProtocolInterpreter.RelayStatus.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0200 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0210</para></remarks>
    public class TestMid0210 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0210 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0210 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0210(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0211</para></remarks>
    public class TestMid0211 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0211 mid) {
            mid.StatusDigInOne = true;
            mid.StatusDigInTwo = true;
            mid.StatusDigInThree = true;
            mid.StatusDigInFour = true;
            mid.StatusDigInFive = true;
            mid.StatusDigInSix = true;
            mid.StatusDigInSeven = true;
            mid.StatusDigInEight = true;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0211 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0211(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0212</para></remarks>
    public class TestMid0212 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0212 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0212 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0213</para></remarks>
    public class TestMid0213 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0213 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0213 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0214</para></remarks>
    public class TestMid0214 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0214 mid) {
            mid.DeviceNumber = -1;
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.IOInterface.Mid0214 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0214(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0214(0, 1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.IOInterface.Mid0214 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0214(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 2.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0214(0, 2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0215</para></remarks>
    public class TestMid0215 {
        public void runTests() {
            testRevision1();
            testRevision2();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.IOINTERFACE.RELAY, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.IOINTERFACE.DIGITALINPUT, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0215 mid) {
            mid.IODeviceId = -1;
            mid.Relays = new System.Collections.Generic.List<OpenProtocolInterpreter.IOInterface.Relay>();
            mid.DigitalInputs = new System.Collections.Generic.List<OpenProtocolInterpreter.IOInterface.DigitalInput>();
/*
            mid.NumberOfRelays = -1;
*/
/*
            mid.NumberOfDigitalInputs = -1;
*/
        }
        void testRevision1() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.IOInterface.Mid0215 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0215(1);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
        void testRevision2() {
            // HAVE multiple revisions
            OpenProtocolInterpreter.IOInterface.Mid0215 mid;
            string package;

            // Revision 2.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0215(2);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0216</para></remarks>
    public class TestMid0216 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0216 mid) {
            mid.RelayNumber = OpenProtocolInterpreter.RelayNumber.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0216 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0216(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0216(OpenProtocolInterpreter.RelayNumber.OFF, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0217</para></remarks>
    public class TestMid0217 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0217 mid) {
            mid.RelayNumber = OpenProtocolInterpreter.RelayNumber.OFF;
            mid.RelayStatus = true;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0217 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0217(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0217(OpenProtocolInterpreter.RelayNumber.OFF, false, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0218</para></remarks>
    public class TestMid0218 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0218 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0218 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0219</para></remarks>
    public class TestMid0219 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0219 mid) {
            mid.RelayNumber = OpenProtocolInterpreter.RelayNumber.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0219 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0219(OpenProtocolInterpreter.RelayNumber.OFF);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0220</para></remarks>
    public class TestMid0220 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0220 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.DigitalInputNumber.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0220 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0220(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0220(OpenProtocolInterpreter.DigitalInputNumber.OFF, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0221</para></remarks>
    public class TestMid0221 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0221 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.DigitalInputNumber.OFF;
            mid.DigitalInputStatus = true;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0221 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0221(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0221(OpenProtocolInterpreter.DigitalInputNumber.OFF, false, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0222</para></remarks>
    public class TestMid0222 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0222 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0222 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0223</para></remarks>
    public class TestMid0223 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0223 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.DigitalInputNumber.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0223 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0223(OpenProtocolInterpreter.DigitalInputNumber.OFF);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0224</para></remarks>
    public class TestMid0224 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0224 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.DigitalInputNumber.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0224 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0224(OpenProtocolInterpreter.DigitalInputNumber.OFF);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.IOInterface.Mid0225</para></remarks>
    public class TestMid0225 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.IOInterface.Mid0225 mid) {
            mid.DigitalInputNumber = OpenProtocolInterpreter.DigitalInputNumber.OFF;
        }
        void testRevision1() {
            OpenProtocolInterpreter.IOInterface.Mid0225 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.IOInterface.Mid0225(OpenProtocolInterpreter.DigitalInputNumber.OFF);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PLCUserData.Mid0240</para></remarks>
    public class TestMid0240 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.PLCUserData.Mid0240 mid) {
            mid.UserData = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.PLCUserData.Mid0240 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.PLCUserData.Mid0240("STRING");
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PLCUserData.Mid0241</para></remarks>
    public class TestMid0241 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.PLCUserData.Mid0241 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.PLCUserData.Mid0241 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.PLCUserData.Mid0241(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PLCUserData.Mid0242</para></remarks>
    public class TestMid0242 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.PLCUserData.Mid0242 mid) {
            mid.UserData = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.PLCUserData.Mid0242 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.PLCUserData.Mid0242(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.PLCUserData.Mid0242("STRING", null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PLCUserData.Mid0243</para></remarks>
    public class TestMid0243 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.PLCUserData.Mid0243 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.PLCUserData.Mid0243 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PLCUserData.Mid0244</para></remarks>
    public class TestMid0244 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.PLCUserData.Mid0244 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.PLCUserData.Mid0244 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.PLCUserData.Mid0245</para></remarks>
    public class TestMid0245 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.PLCUserData.Mid0245 mid) {
            mid.Offset = -1;
            mid.UserData = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.PLCUserData.Mid0245 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.PLCUserData.Mid0245(0, "STRING");
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationSelector.Mid0250</para></remarks>
    public class TestMid0250 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationSelector.Mid0250 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationSelector.Mid0250 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ApplicationSelector.Mid0250(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationSelector.Mid0251</para></remarks>
    public class TestMid0251 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[SYSTEM.BOOLEAN, MSCORLIB, VERSION=4.0.0.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=B77A5C561934E089]]
        public void setAllProperties(OpenProtocolInterpreter.ApplicationSelector.Mid0251 mid) {
            mid.DeviceId = -1;
            mid.NumberOfSockets = -1;
            mid.SocketStatus = new System.Collections.Generic.List<bool>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationSelector.Mid0251 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ApplicationSelector.Mid0251(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.ApplicationSelector.Mid0251(0, 0, new bool[1], null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationSelector.Mid0252</para></remarks>
    public class TestMid0252 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationSelector.Mid0252 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationSelector.Mid0252 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationSelector.Mid0253</para></remarks>
    public class TestMid0253 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationSelector.Mid0253 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationSelector.Mid0253 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationSelector.Mid0254</para></remarks>
    public class TestMid0254 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.LIGHTCOMMAND, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.ApplicationSelector.Mid0254 mid) {
            mid.DeviceId = -1;
            mid.GreenLights = new System.Collections.Generic.List<OpenProtocolInterpreter.LightCommand>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationSelector.Mid0254 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ApplicationSelector.Mid0254(0, new OpenProtocolInterpreter.LightCommand[1]);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationSelector.Mid0255</para></remarks>
    public class TestMid0255 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.LIGHTCOMMAND, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.ApplicationSelector.Mid0255 mid) {
            mid.DeviceId = -1;
            mid.RedLights = new System.Collections.Generic.List<OpenProtocolInterpreter.LightCommand>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationSelector.Mid0255 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ApplicationSelector.Mid0255(0, new OpenProtocolInterpreter.LightCommand[1]);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0260</para></remarks>
    public class TestMid0260 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0260 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0260 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0261</para></remarks>
    public class TestMid0261 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0261 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0261 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0261(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0262</para></remarks>
    public class TestMid0262 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0262 mid) {
            mid.ToolTagId = "TESTTESTTEST";
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0262 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0262(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0263</para></remarks>
    public class TestMid0263 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0263 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0263 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0264</para></remarks>
    public class TestMid0264 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0264 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0264 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0265</para></remarks>
    public class TestMid0265 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0265 mid) {
            mid.ToolTagId = "TESTTESTTEST";
            mid.ToolStatus = OpenProtocolInterpreter.ToolStatus.OPERABLE;
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0265 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ApplicationToolLocationSystem.Mid0265("STRING", OpenProtocolInterpreter.ToolStatus.OPERABLE);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ApplicationController.Mid0270</para></remarks>
    public class TestMid0270 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ApplicationController.Mid0270 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.ApplicationController.Mid0270 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Statistic.Mid0300</para></remarks>
    public class TestMid0300 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Statistic.Mid0300 mid) {
            mid.ParameterSetId = -1;
            mid.HistogramType = OpenProtocolInterpreter.HistogramType.TORQUE;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Statistic.Mid0300 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Statistic.Mid0301</para></remarks>
    public class TestMid0301 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Statistic.Mid0301 mid) {
            mid.ParameterSetId = -1;
            mid.HistogramType = OpenProtocolInterpreter.HistogramType.TORQUE;
            mid.SigmaHistogram = -1m;
            mid.MeanValueHistogram = -1m;
            mid.ClassRange = -1m;
            mid.FirstBar = -1;
            mid.SecondBar = -1;
            mid.ThirdBar = -1;
            mid.FourthBar = -1;
            mid.FifthBar = -1;
            mid.SixthBar = -1;
            mid.SeventhBar = -1;
            mid.EighthBar = -1;
            mid.NinethBar = -1;
        }
        void testRevision1() {
            OpenProtocolInterpreter.Statistic.Mid0301 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.AutomaticManualMode.Mid0400</para></remarks>
    public class TestMid0400 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.AutomaticManualMode.Mid0400 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.AutomaticManualMode.Mid0400 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.AutomaticManualMode.Mid0400(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.AutomaticManualMode.Mid0401</para></remarks>
    public class TestMid0401 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.AutomaticManualMode.Mid0401 mid) {
            mid.ManualAutomaticMode = true;
        }
        void testRevision1() {
            OpenProtocolInterpreter.AutomaticManualMode.Mid0401 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.AutomaticManualMode.Mid0401(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.AutomaticManualMode.Mid0401(false, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.AutomaticManualMode.Mid0402</para></remarks>
    public class TestMid0402 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.AutomaticManualMode.Mid0402 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.AutomaticManualMode.Mid0402 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.AutomaticManualMode.Mid0403</para></remarks>
    public class TestMid0403 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.AutomaticManualMode.Mid0403 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.AutomaticManualMode.Mid0403 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.AutomaticManualMode.Mid0410</para></remarks>
    public class TestMid0410 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.AutomaticManualMode.Mid0410 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.AutomaticManualMode.Mid0410 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.AutomaticManualMode.Mid0411</para></remarks>
    public class TestMid0411 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.AutomaticManualMode.Mid0411 mid) {
            mid.AutoDisableSetting = -1;
            mid.CurrentBatch = -1;
        }
        void testRevision1() {
            OpenProtocolInterpreter.AutomaticManualMode.Mid0411 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.AutomaticManualMode.Mid0411(0, 0);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0420</para></remarks>
    public class TestMid0420 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0420 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0420 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0420(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0421</para></remarks>
    public class TestMid0421 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0421 mid) {
            mid.DigitalInputStatus = true;
        }
        void testRevision1() {
            OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0421 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0421(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0421(false, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0422</para></remarks>
    public class TestMid0422 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0422 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0422 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0423</para></remarks>
    public class TestMid0423 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0423 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.OpenProtocolCommandsDisabled.Mid0423 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MotorTuning.Mid0500</para></remarks>
    public class TestMid0500 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MotorTuning.Mid0500 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MotorTuning.Mid0500 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MotorTuning.Mid0501</para></remarks>
    public class TestMid0501 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MotorTuning.Mid0501 mid) {
            mid.MotorTuneResult = true;
        }
        void testRevision1() {
            OpenProtocolInterpreter.MotorTuning.Mid0501 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.MotorTuning.Mid0501(null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

            // Revision 1.
            mid = new OpenProtocolInterpreter.MotorTuning.Mid0501(false, null);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MotorTuning.Mid0502</para></remarks>
    public class TestMid0502 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MotorTuning.Mid0502 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MotorTuning.Mid0502 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MotorTuning.Mid0503</para></remarks>
    public class TestMid0503 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MotorTuning.Mid0503 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MotorTuning.Mid0503 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.MotorTuning.Mid0504</para></remarks>
    public class TestMid0504 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.MotorTuning.Mid0504 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.MotorTuning.Mid0504 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Result.Mid1201</para></remarks>
    public class TestMid1201 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.RESULT.OBJECTDATA, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.RESULT.VARIABLEDATAFIELD, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.Result.Mid1201 mid) {
            mid.TotalNumberOfMessages = -1;
            mid.MessageNumber = -1;
            mid.ResultDataIdentifier = -1;
            mid.Time = System.DateTime.MinValue;
            mid.ResultStatus = true;
            mid.OperationType = OpenProtocolInterpreter.OperationType.NON_SYNCHRONIZED_TIGHTENING;
            mid.NumberOfObjects = -1;
            mid.NumberOfDataFields = -1;
            mid.ObjectDataList = new System.Collections.Generic.List<OpenProtocolInterpreter.Result.ObjectData>();
            mid.VariableDataFields = new System.Collections.Generic.List<OpenProtocolInterpreter.Result.VariableDataField>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.Result.Mid1201 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Result.Mid1202</para></remarks>
    public class TestMid1202 {
        public void runTests() {
            testRevision1();
        }
        // unhandled: SYSTEM.COLLECTIONS.GENERIC.LIST`1[[OPENPROTOCOLINTERPRETER.RESULT.VARIABLEDATAFIELD, RB_OPENPROTOCOLINTERPRETER, VERSION=3.0.3.0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=NULL]]
        public void setAllProperties(OpenProtocolInterpreter.Result.Mid1202 mid) {
            mid.TotalNumberOfMessages = -1;
            mid.MessageNumber = -1;
            mid.ResultDataIdentifier = -1;
            mid.ObjectId = -1;
            mid.NumberOfDataFields = -1;
            mid.VariableDataFields = new System.Collections.Generic.List<OpenProtocolInterpreter.Result.VariableDataField>();
        }
        void testRevision1() {
            OpenProtocolInterpreter.Result.Mid1202 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.Result.Mid1203</para></remarks>
    public class TestMid1203 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.Result.Mid1203 mid) {
        }
        void testRevision1() {
            OpenProtocolInterpreter.Result.Mid1203 mid;
            string package;

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.ParameterSet.Mid2504</para></remarks>
    public class TestMid2504 {
        public void runTests() {
            testRevision1();
        }
        public void setAllProperties(OpenProtocolInterpreter.ParameterSet.Mid2504 mid) {
            mid.ParameterSetId = -1;
        }
        void testRevision1() {
            OpenProtocolInterpreter.ParameterSet.Mid2504 mid;
            string package;

            // Revision 1.
            mid = new OpenProtocolInterpreter.ParameterSet.Mid2504(0);
            try {
                this.setAllProperties(mid);
                package = mid.Pack();
                Trace.WriteLine(("package = " 
                                + (package + ".")));
            } catch (System.Exception ex) {
                System.Reflection.MethodBase mb = System.Reflection.MethodBase.GetCurrentMethod();
                // catch-1
                System.Diagnostics.Trace.WriteLine(mb.ReflectedType.Name, ".", mb.ReflectedType.Name);
            } finally {
                // finally
            }

        }
    }
    // <summary>test</summary>
    // <remarks><para>Type=OpenProtocolInterpreter.KeepAlive.Mid9999</para></remarks>
    public class TestMid9999 {
        public void runTests() {
            testRevision0();
        }
        public void setAllProperties(OpenProtocolInterpreter.KeepAlive.Mid9999 mid) {
        }
        void testRevision0() {
            OpenProtocolInterpreter.KeepAlive.Mid9999 mid;
            string package;

        }
    }
}
