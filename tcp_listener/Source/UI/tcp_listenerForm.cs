//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//using OpenProtocolInterpreter;
//using OpenProtocolInterpreter.Communication;
//using OpenProtocolInterpreter.KeepAlive;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using NSTcp_listener.Threads;
using OpenProtocolInterpreter;
using OpenProtocolInterpreter.Communication;
using OpenProtocolInterpreter.Job;
using OpenProtocolInterpreter.Job.Advanced;
using OpenProtocolInterpreter.KeepAlive;
using OpenProtocolInterpreter.Vin;

namespace NSTcp_listener {

	public partial class tcp_listenerForm {
		const string DEFAULT_ADDRESSS = "127.0.0.1";
		//const string DEFAULT_ADDRESSS = "192.168.105.8";
		const int DEFAULT_PORT = 4545;
		public tcp_listenerForm() {
			InitializeComponent();
		}
		void exitClick(object sender, EventArgs ea) {
			CancelEventArgs cea = new CancelEventArgs();

			Application.Exit(cea);
			if (cea.Cancel) {
				return;
			}
			Application.Exit();
		}
		void formLoad(object sender, EventArgs ea) {
		}
		[STAThread()]
		public static void Main(string[] args) {
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);
			Application.Run(new tcp_listenerForm());
		}
		List<MyThread> _threads = new List<MyThread>();
		void tsmiStartListening_Click(object sender, EventArgs e) {
			MyThread mt;
			Logger.log(MethodBase.GetCurrentMethod());
			Logger.log(MethodBase.GetCurrentMethod(), "creating thread-object");
			_threads.Add(mt = new MyThread(DEFAULT_ADDRESSS, DEFAULT_PORT));
			//_threads.Add(mt = new MyThread("192.168.105.8", 4545));
			Logger.log(MethodBase.GetCurrentMethod(), "starting thread-object");
			mt.start();
			//new MyThread().start();
		}
		protected override void OnFormClosed(FormClosedEventArgs e) {
			int n;
			MyThread[] currentThreads;
			if ((n=_threads.Count)>0) {
				currentThreads=new MyThread[n];
				_threads.CopyTo(currentThreads);
				for (int i = 0; i<n; i++) {
					currentThreads[i].stop();
					currentThreads[i].waitHandle.WaitOne();
				}
			}
			base.OnFormClosed(e);
		}
	}
}